{"version":3,"sources":["/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/bootstrap","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/pegjs/flinksql.pegjs","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/external \"big-integer\"","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.single.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/util.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/window.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/over.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/binary.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/func.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/limit.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/with.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/update.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/insert.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/tables.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/select.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/show.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/array-struct.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/expr.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/aggregation.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/assign.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/case.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/column.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/interval.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/index-definition.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/constrain.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/create.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/alter.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/command.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/exec.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/union.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/analyze.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/delete.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/sql.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c4","peg$literalExpectation","peg$c7","peg$c9","peg$c11","peg$c13","head","tail","createList","peg$c20","peg$c22","peg$c24","peg$c30","peg$c32","peg$c34","peg$c36","peg$c42","peg$c44","peg$c46","peg$c48","peg$c51","peg$c53","peg$c55","peg$c69","peg$c71","peg$c73","peg$c75","peg$c78","peg$c80","peg$c82","peg$c84","peg$c90","peg$c94","peg$c97","peg$c99","peg$c101","peg$c104","peg$c106","peg$c108","peg$c111","peg$c113","peg$c115","peg$c117","peg$c119","peg$c122","peg$c124","peg$c126","peg$c128","peg$c130","peg$c132","peg$c136","peg$c140","peg$c142","peg$c144","peg$c146","peg$c149","peg$c151","peg$c153","peg$c155","peg$c160","peg$c162","peg$c165","peg$c167","peg$c170","peg$c172","peg$c174","peg$c176","peg$c178","peg$c181","peg$c184","peg$c186","peg$c188","peg$c190","peg$c193","peg$c199","peg$c201","peg$c203","peg$c205","peg$c207","peg$c209","peg$c211","peg$c213","peg$c215","peg$c218","peg$c222","peg$c224","peg$c229","peg$c244","peg$c246","peg$c248","peg$c250","peg$c257","peg$c259","peg$c262","peg$c264","peg$c266","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c294","peg$c317","createBinaryExprChain","peg$c319","peg$c326","peg$c328","peg$c330","peg$c332","peg$c334","peg$c336","peg$c348","peg$c350","peg$c352","peg$c354","peg$c356","peg$c358","peg$c361","peg$c363","peg$c366","peg$c368","peg$c370","peg$c373","peg$c379","reservedMap","peg$c385","peg$c386","peg$c387","peg$classExpectation","peg$c388","chars","peg$c389","peg$c390","peg$c392","peg$c393","peg$c394","peg$c398","peg$c399","peg$c400","peg$c401","peg$c402","peg$c403","peg$c405","peg$c413","peg$c421","peg$c423","peg$c425","peg$c428","peg$c434","peg$c436","peg$c438","peg$c440","peg$c442","peg$c444","peg$c446","peg$c448","peg$c450","peg$c452","peg$c454","peg$c456","peg$c458","peg$c460","peg$c462","peg$c464","peg$c466","peg$c468","peg$c470","peg$c472","peg$c474","peg$c476","peg$c493","peg$c494","peg$c495","peg$c496","peg$c498","peg$c501","peg$c504","peg$c507","peg$c510","peg$c513","peg$c516","peg$c519","peg$c522","peg$c525","peg$c528","peg$c531","peg$c534","peg$c537","peg$c539","peg$c540","peg$c549","peg$c553","peg$c554","peg$c555","peg$c556","peg$c557","peg$c558","peg$c559","peg$c560","peg$c563","peg$c565","peg$c567","peg$c569","peg$c571","peg$c575","peg$c578","peg$c580","peg$c582","peg$c584","peg$c586","peg$c588","peg$c590","peg$c592","peg$c594","peg$c597","peg$c599","peg$c603","peg$c606","peg$c608","peg$c610","peg$c612","peg$c615","peg$c618","peg$c621","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c635","peg$c637","peg$c639","peg$c641","peg$c643","peg$c645","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c658","peg$c661","peg$c664","peg$c667","peg$c670","peg$c674","peg$c677","peg$c680","peg$c684","peg$c687","peg$c690","peg$c693","peg$c696","peg$c699","peg$c702","peg$c705","peg$c708","peg$c711","peg$c714","peg$c717","peg$c756","peg$c759","peg$c762","peg$c764","peg$c766","peg$c768","peg$c770","peg$c772","peg$c774","peg$c777","peg$c780","peg$c783","peg$c786","peg$c789","peg$c792","peg$c795","peg$c798","peg$c801","peg$c804","peg$c807","peg$c810","peg$c813","peg$c816","peg$c819","peg$c822","peg$c825","peg$c828","peg$c831","peg$c834","peg$c837","peg$c840","peg$c843","peg$c847","peg$c850","peg$c853","peg$c856","peg$c859","peg$c862","peg$c865","peg$c868","peg$c875","peg$c881","peg$c890","peg$c893","peg$c896","peg$c899","peg$c902","peg$c905","peg$c908","peg$c911","peg$c914","peg$c917","peg$c920","peg$c922","peg$c924","peg$c926","peg$c928","peg$c930","peg$c932","peg$c935","peg$c938","peg$c942","peg$c945","peg$c950","peg$c953","peg$c956","peg$c959","peg$c962","peg$c964","peg$c966","peg$c968","peg$c970","peg$c972","peg$c974","peg$c976","peg$c978","peg$c980","peg$c982","peg$c984","peg$c986","peg$c988","peg$c990","peg$c992","peg$c994","peg$c996","peg$c998","peg$c1002","peg$c1003","peg$c1004","peg$c1022","dataType","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsecrud_stmt","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parsetable_ref_list","a","tt","db","toLowerCase","keyword","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","op","peg$c59","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","s8","peg$parseLPAREN","peg$parsecreate_definition","peg$parseCOMMA","peg$parseRPAREN","peg$parsecreate_table_definition","peg$parsetable_option","peg$parsetable_options","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","ife","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","e","parentheses","lt","like","peg$c16","peg$parsecreate_table_stmt","s18","s20","s21","s23","s25","s27","s29","peg$parseKW_CONSTRAINT","substr","peg$parseident_name","peg$parsetrigger_event","peg$parseKW_OR","peg$parsetrigger_event_list","peg$parseKW_FROM","args","kw","peg$parsetrigger_deferrable","ob","peg$parsetrigger_for_row","peg$parseKW_WHEN","peg$parseexpr","cond","peg$parsetrigger_when","peg$parseproc_func_call","kc","te","tn","fr","de","fe","tw","fct","constraint","events","deferrable","for_each","when","execute","expr","constraint_type","constraint_kw","resource","peg$parsecreate_constraint_trigger","s12","s14","s16","peg$parseliteral_string","peg$parseKW_WITH","w","v","f","extension","commonStrToLiteral","with","schema","version","peg$parsecreate_extension_stmt","s24","s26","s28","s30","peg$parseKW_UNIQUE","peg$parseident_start","peg$parseKW_CONCURRENTLY","peg$parseident","peg$parseindex_type","peg$parsecolumn_order","peg$parsecolumn_order_list","peg$parseindex_option","peg$parseindex_options_list","peg$parseKW_TABLESPACE","peg$parsewhere_clause","co","on","ta","um","cols","wr","ts","index_type","concurrently","index","on_kw","index_using","index_columns","with_before_where","tablespace","where","peg$parsecreate_index_stmt","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","database","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parselock_mode","k","lm","nw","tables","map","lock_mode","nowait","peg$parselock_stmt","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","peg$parsereturning_stmt","set","returning","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parsecolumn","peg$parsecolumn_list","peg$parseinsert_value_clause","ri","isArray","row","idx","values","partition","peg$c300","peg$parsereplace_insert_stmt","ig","it","prefix","filter","peg$c301","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","info","addition","peg$c291","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseselect_stmt","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseorder_by_clause","peg$parselimit_clause","_next","union","_orderby","_limit","peg$c2","peg$parseKW_NOT","peg$parseKW_EXISTS","s10","nf","peg$parsecollate_expr","peg$parseKW_ASC","peg$parseKW_DESC","collate","opclass","order","nulls","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parseconstraint_name","peg$parsecte_column_definition","peg$parseindex_options","id","definition","index_options","peg$parsecreate_constraint_primary","peg$parseKW_KEY","u","peg$parsecreate_constraint_unique","peg$parsereference_definition","reference_definition","peg$parsecreate_constraint_foreign","peg$parsecreate_constraint_definition","clc","ca","cf","re","peg$parsedata_type","peg$parseliteral_not_null","peg$parseliteral_null","peg$parsedefault_expr","df","default_val","nullable","peg$c39","peg$parsecolumn_constraint","peg$parsekeyword_comment","peg$parsecolumn_format","peg$parsestorage","auto_increment","unique_or_primary","comment","column_format","storage","peg$parseKW_COLLATE","peg$parseKW_DEFAULT","peg$parseliteral","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","action","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","peg$parseALTER_RENAME_TABLE","peg$parseKW_ASSIGIN_EQUAL","symbol","algorithm","lock","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_delete","on_update","ro","peg$parse___","peg$parsereference_option","peg$parseKW_INSERT","peg$parsecolumn_ref_list","peg$c137","peg$parsecreate_option_character_set_kw","peg$parseliteral_numeric","peg$parseKW_COMMENT","peg$c182","peg$c191","peg$c194","peg$parseselect_stmt_nake","parentheses_symbol","peg$parsewith_clause","cte","peg$parsecte_definition","peg$parseKW_RECURSIVE","recursive","stmt","s22","opts","g","h","peg$parseKW_SELECT","peg$parsequery_option","peg$c231","peg$parseoption_clause","peg$parseKW_DISTINCT","peg$parsecolumn_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","distinct","groupby","having","orderby","limit","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c234","peg$parsebinary_column_expr","peg$parseKW_DOUBLE_COLON","target","peg$parseDOT","tbl","peg$c236","peg$parsealias_clause","alias","peg$c237","JSON","stringify","peg$c381","peg$parsequoted_ident","peg$parsealias_ident","peg$parseKW_USING","result","peg$c253","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c255","peg$c265","peg$parsetable_base","peg$parsetable_ref","peg$parsejoin_op","using","peg$parseon_clause","peg$c270","peg$c271","peg$parsetable_join","peg$parseKW_DUAL","peg$c274","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","obj","peg$c279","peg$c281","peg$parsevar_decl","peg$parseor_and_where_expr","peg$parseKW_WHERE","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$c288","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","i1","res","seperator","peg$c289","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c296","peg$parseKW_RETURNING","peg$parsevalue_item","peg$parsevalue_list","peg$parsevalue_clause","peg$parseKW_PARTITION","el","peg$c307","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$c309","peg$parsecase_expr","condition_list","otherwise","peg$parseKW_CASE","peg$parsecase_when_then","peg$parseKW_ELSE","peg$parsecase_else","peg$parseKW_END","peg$parseKW_THEN","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseKW_AND","len","left","createBinaryExpr","peg$c315","peg$c316","peg$parsenot_expr","peg$parsecomparison_expr","nk","peg$parseexists_op","peg$parseexists_expr","rh","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c346","peg$parsein_op_right","peg$parseKW_BETWEEN","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","pop","tableName","peg$c338","peg$c339","peg$parseis_op_right","peg$parselike_op","peg$parselike_op_right","peg$parseOPERATOR_CONCATENATION","peg$parseDOUBLE_WELL_ARROW","peg$parseWELL_ARROW","peg$parsejsonb_op_right","peg$parsecomparison_op_right","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseaggr_func","peg$parsefunc_call","peg$parseKW_CAST","peg$c480","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c481","scale","peg$c482","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c483","peg$parsecast_expr","peg$c375","peg$parseDOUBLE_ARROW","peg$parseSINGLE_ARROW","arrows","item","properties","peg$c376","peg$c378","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parsecolumn_name","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c418","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_COLLECT","peg$parseKW_AGGR_FUNC","peg$parseKW_RANK","peg$parseKW_DENSE_RANK","peg$parseKW_ROW_NUMBER","peg$parseKW_AGGR_FUNC_NO_ARG","peg$c408","peg$parseKW_LISTAGG","separator","peg$c409","peg$parseaggr_fun_expr","peg$parseon_update_current_timestamp","peg$parseKW_CURRENT_TIMESTAMP","peg$c411","peg$parseover_partition","partitionby","peg$parsetrim_rem","peg$parsetrim_position","rm","peg$c426","bc","tr","peg$c429","peg$parsetrim_func_clause","peg$parseproc_func_name","over","peg$parsescalar_time_func","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parsescalar_func","peg$c431","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_TIME","peg$parseKW_DATE","field","cast_type","source","peg$parseextract_func","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$c492","peg$parseliteral_datetime","peg$parseKW_NULL","peg$parseKW_NOT_NULL","peg$c490","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c543","exp","peg$c544","peg$c545","peg$parsenumber","peg$parsedigits","peg$parsedigit","digit","peg$c547","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_DOUBLE","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR__PRE_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseLANGLEBRAKE","peg$parseRANGLEBRAKE","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseLBRAKE","peg$parseproc_primary_list","peg$parseRBRAKE","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1011","peg$c1013","peg$c1018","peg$parsemem_chain","members","peg$c1021","peg$parseKW_STRING","peg$c1023","peg$parsecharacter_string_type","peg$parsenumeric_type_suffix","suffix","peg$c1026","peg$c1027","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_JSON","peg$parseKW_JSONB","peg$parsejson_type","peg$parseKW_GEOMETRY","peg$parsegeometry_type","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parsetext_type","peg$parseKW_UUID","peg$parseuuid_type","peg$parseKW_BOOL","peg$parseKW_BOOLEAN","peg$parseboolean_type","peg$parseKW_ARRAY","subType","peg$parsecollection_type","peg$parseKW_MAP","peg$parsekey_value_type","peg$parseKW_ROW","peg$parserow_type","peg$parseKW_ZEROFILL","un","ze","peg$c1024","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","keys","columnInfo","split","strOrLiteral","require","PARSER_NAME","DEFAULT_OPT","parserOpt","commonOptionConnector","opt","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","replaceParams","params","replaceParamsInner","onPartitionsToSQL","partitions","dataTypeToSQL","arrayStructTypeToSQL","anglebracket","dataTypeUpper","field_name","field_type","commentToSQL","triggerEventToSQL","event","eventKw","kwArgs","columnRefToSQL","returningToSQL","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","window_specification","windowFrame","window_frame_clause","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","as_window_specification","constructArgsList","consider_nulls","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","binaryToSQL","rstr","isBetween","castToSQL","expression","dataTypeSuffix","symbolChar","arrayDimension","array","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","withExprStr","setToSQL","sets","clauses","setItem","valuesToSQL","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","operatorToSQL","in_expr","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","tableToSQL","unnestExpr","withOffset","with_offset","unnestToSQL","prefixStr","tablesample","table_hint","schemaStr","valueSQL","valuesExpr","tableSampleSQL","repeatable","baseTable","joinExpr","tableOptionToSQL","tableOption","selectIntoToSQL","into","position","intoType","varToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","lockingRead","locking_read","qualify","top","windowInfo","window","withInfo","distinctToSQL","columnsToSQL","intoSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","view","arrayStructValueToSQL","exprList","expr_list","arrayPath","array_path","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","within_group_orderby","distinctSQL","withinGroup","filterStr","window_func","assign","leftVar","rightVal","binary_expr","case","conditions","cast","column_ref","datatype","extract","castType","fulltext_search","against","matchExpr","againstExpr","asToSQL","function","insert","unionToSQL","interval","intervalExpr","show","struct","namedWindowExprInfo","varName","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","enforced","referenceDefinition","constraintSQL","columnReferenceDefinitionToSQL","array_index","order_by","columnOffsetToSQL","number","arrow","columnDataType","reference","onDelete","columnOrder","columnDefinitionToSQL","columnDefinition","columnOpt","characterSet","character_set","check","defaultOpt","autoIncrement","uniquePrimary","columnFormat","columnOption","generated","storage_type","generatedExpressionToSQL","asStr","getDual","star","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","createDefinition","firstAfter","first_after","ifNotExists","oldColumn","old_column","trim","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lockInfo","pgLock","execVariablesToSQL","select","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createTableToSQL","constraintKw","createTriggerToSQL","withName","createExtensionToSQL","fileStream","filestream_on","include","indexColumns","indexUsing","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","withBeforeWhere","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","definer","sqlSecurity","sql_security","withClause","viewName","createViewToSQL","deallocate","delete","exec","parameters","update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","unlock","fun","unionKeyword","bigQueryToSQL","bigquery","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"flinksql.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          // => multiple_stmt | cmd_stmt | crud_stmt\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            /*\n            // is in reality: { tableList: any[]; columnList: any[]; ast: T; }\n            export type AstStatement<T> = T;\n             => AstStatement<crud_stmt[]> */\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n            \tast: cur\n            }\n          },\n      peg$c2 = function(head, tail, ob, l) {\n           /* export interface union_stmt_node extends select_stmt_node  {\n               _next: union_stmt_node;\n               union: 'union' | 'union all';\n            }\n           => AstStatement<union_stmt_node>\n           */\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][5]\n              cur.union = tail[i][3] ? 'union all' : 'union'\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c3 = \"if\",\n      peg$c4 = peg$literalExpectation(\"IF\", true),\n      peg$c5 = function() {\n          return 'IF NOT EXISTS'\n        },\n      peg$c6 = \"extension\",\n      peg$c7 = peg$literalExpectation(\"EXTENSION\", true),\n      peg$c8 = \"schema\",\n      peg$c9 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c10 = \"version\",\n      peg$c11 = peg$literalExpectation(\"VERSION\", true),\n      peg$c12 = function(a, e, ife, n, w, s, v, f) {\n            /*\n             export type nameOrLiteral = literal_string | { type: 'same', value: string; };\n            => {\n                type: 'create';\n                keyword: 'extension';\n                if_not_exists?: 'if not exists';\n                extension: nameOrLiteral;\n                with: 'with';\n                schema: nameOrLiteral;\n                version: nameOrLiteral;\n                from: nameOrLiteral;\n              }\n            */\n            return {\n              type: 'create',\n              keyword: e.toLowerCase(),\n              if_not_exists:ife,\n              extension: commonStrToLiteral(n),\n              with: w && w[0].toLowerCase(),\n              schema: commonStrToLiteral(s && s[2].toLowerCase()), // <== wont that be a bug ?\n              version: commonStrToLiteral(v && v[2]),\n              from: commonStrToLiteral(f && f[2]),\n            }\n          },\n      peg$c13 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c14 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists:ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c15 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            /*\n            export type create_table_stmt_node = create_table_stmt_node_simple | create_table_stmt_node_like;\n            export interface create_table_stmt_node_base {\n              type: 'create';\n              keyword: 'table';\n              temporary?: 'temporary';\n              if_not_exists?: 'if not exists';\n              table: table_ref_list;\n            }\n            export interface create_table_stmt_node_simple extends create_table_stmt_node_base{\n              ignore_replace?: 'ignore' | 'replace';\n              as?: 'as';\n              query_expr?: union_stmt_node;\n              create_definition?: create_table_definition;\n              table_options?: table_options;\n            }\n            => AstStatement<create_table_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c16 = function(a, tp, ife, t, lt) {\n            /*\n\n            export interface create_table_stmt_node_like extends create_table_stmt_node_base{\n              like: create_like_table;\n            }\n            => AstStatement<create_table_stmt_node>;\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c17 = function(a, kw, t, co, n, on, ta, um, cols, wr, ts, w) {\n          /*\n          export interface create_index_stmt_node {\n            type: 'create';\n            index_type?: 'unique';\n            keyword: 'index';\n            concurrently?: 'concurrently';\n            index: string;\n            on_kw: string;\n            table: table_name;\n            index_using?: index_type;\n            index_columns: column_order[];\n            with?: index_option[];\n            with_before_where: true;\n            tablespace?: {type: 'origin'; value: string; }\n            where?: where_clause;\n          }\n          => AstStatement<create_index_stmt_node>\n          */\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                concurrently: co && co.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_using: um,\n                index_columns: cols,\n                with: wr && wr[4],\n                with_before_where: true,\n                tablespace: ts && { type: 'origin', value: ts[2] },\n                where: w,\n              }\n          }\n        },\n      peg$c18 = function(head, tail) {\n          // => column_order[]\n          return createList(head, tail)\n        },\n      peg$c19 = \"nulls\",\n      peg$c20 = peg$literalExpectation(\"NULLS\", true),\n      peg$c21 = \"first\",\n      peg$c22 = peg$literalExpectation(\"FIRST\", true),\n      peg$c23 = \"last\",\n      peg$c24 = peg$literalExpectation(\"LAST\", true),\n      peg$c25 = function(c, ca, op, o, nf) {\n          /*\n          => {\n            column: expr;\n            collate: collate_expr;\n            opclass: ident;\n            order: 'asc' | 'desc';\n            nulls: 'nulls last' | 'nulls first';\n          }\n          */\n          return {\n            column: c,\n            collate: ca,\n            opclass: op,\n            order: o && o.toLowerCase() || 'asc',\n            nulls: nf && `${nf[0].toLowerCase()} ${nf[2].toLowerCase()}`,\n          }\n        },\n      peg$c26 = function(t) {\n          // => { type: 'like'; table: table_ref_list; }\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c27 = function(e) {\n           // => create_like_table_simple & { parentheses?: boolean; }\n            e.parentheses = true;\n            return e;\n        },\n      peg$c28 = function(head, tail) {\n            // => create_definition[]\n            return createList(head, tail);\n          },\n      peg$c29 = \"auto_increment\",\n      peg$c30 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c31 = \"unique\",\n      peg$c32 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c33 = \"primary\",\n      peg$c34 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c35 = \"key\",\n      peg$c36 = peg$literalExpectation(\"KEY\", true),\n      peg$c37 = function(c, d, clc, a, u, co, ca, cf, s, re) {\n            /*\n            => {\n              column: column_ref;\n              definition: data_type;\n              nullable: column_constraint['nullable'];\n              default_val: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n              resource: 'column';\n            }\n            */\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              nullable: clc && clc.nullable,\n              default_val: clc && clc.default_val,\n              auto_increment: a && a.toLowerCase(),\n              unique_or_primary: Array.isArray(u) ? `${u[0].toLowerCase()} ${u[2].toLowerCase()}` : u,\n              comment: co,\n              collate: ca,\n              column_format: cf,\n              storage:s,\n              reference_definition: re,\n              resource: 'column'\n            }\n          },\n      peg$c38 = function(n, df) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c39 = function(df, n) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c40 = function(ca) {\n          // => { type: 'collate'; value: ident; }\n          return {\n            type: 'collate',\n            value: ca,\n          }\n        },\n      peg$c41 = \"column_format\",\n      peg$c42 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c43 = \"fixed\",\n      peg$c44 = peg$literalExpectation(\"FIXED\", true),\n      peg$c45 = \"dynamic\",\n      peg$c46 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c47 = \"default\",\n      peg$c48 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c49 = function(k, f) {\n          // => { type: 'column_format'; value: 'fixed' | 'dynamic' | 'default'; }\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c50 = \"storage\",\n      peg$c51 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c52 = \"disk\",\n      peg$c53 = peg$literalExpectation(\"DISK\", true),\n      peg$c54 = \"memory\",\n      peg$c55 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c56 = function(k, s) {\n          // => { type: 'storage'; value: 'disk' | 'memory' }\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c57 = function(ce) {\n          // => { type: 'default'; value: literal | expr; }\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c58 = function(a, r, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c59 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c60 = function(a, kw, t) {\n            /*\n            export interface truncate_stmt_node {\n              type: 'trucate';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<truncate_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c61 = function(d) {\n            /*\n            export interface use_stmt_node {\n              type: 'use';\n              db: ident;\n            }\n            => AstStatement<use_stmt_node>\n            */\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c62 = function(t, e) {\n            /*\n            export interface alter_table_stmt_node {\n              type: 'alter';\n              table: table_ref_list;\n              expr: alter_action_list;\n            }\n            => AstStatement<alter_table_stmt_node>\n            */\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c63 = function(head, tail) {\n            // => alter_action[]\n            return createList(head, tail);\n          },\n      peg$c64 = function(kc, cd) {\n            /*\n            => {\n              action: 'add';\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } & create_column_definition;\n            */\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c65 = function(kc, c) {\n            /* => {\n              action: 'drop';\n              collumn: column_ref;\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } */\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c66 = function(id) {\n             /* => {\n               action: 'add';\n               type: 'alter';\n               } & create_index_definition */\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c67 = function(kw, tn) {\n             /* => {\n               action: 'rename';\n               type: 'alter';\n               resource: 'table';\n               keyword?: 'to' | 'as';\n               table: ident;\n               } */\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c68 = \"algorithm\",\n      peg$c69 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c70 = \"instant\",\n      peg$c71 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c72 = \"inplace\",\n      peg$c73 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c74 = \"copy\",\n      peg$c75 = peg$literalExpectation(\"COPY\", true),\n      peg$c76 = function(s, val) {\n          /* => {\n              type: 'alter';\n              keyword: 'algorithm';\n              resource: 'algorithm';\n              symbol?: '=';\n              algorithm: 'DEFAULT' | 'INSTANT' | 'INPLACE' | 'COPY';\n            }*/\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c77 = \"lock\",\n      peg$c78 = peg$literalExpectation(\"LOCK\", true),\n      peg$c79 = \"none\",\n      peg$c80 = peg$literalExpectation(\"NONE\", true),\n      peg$c81 = \"shared\",\n      peg$c82 = peg$literalExpectation(\"SHARED\", true),\n      peg$c83 = \"exclusive\",\n      peg$c84 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c85 = function(s, val) {\n          /* => {\n            type: 'alter';\n            keyword: 'lock';\n            resource: 'lock';\n            symbol?: '=';\n            lock: 'DEFAULT' | 'NONE' | 'SHARED' | 'EXCLUSIVE';\n          }*/\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c86 = function(kc, c, t, de, id) {\n             /* => {\n               index: column;\n               definition: cte_column_definition;\n               keyword: 'index' | 'key';\n               index_type?: index_type;\n               resource: 'index';\n               index_options?: index_options;\n             }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c87 = function(p, kc, c, de, id) {\n            /* => {\n                index: column;\n                definition: cte_column_definition;\n                keyword: 'fulltext' | 'spatial' | 'fulltext key' | 'spatial key' | 'fulltext index' | 'spatial index';\n                index_options?: index_options;\n                resource: 'index';\n              }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c88 = function(kc, c) {\n          // => { keyword: 'constraint'; constraint: ident; }\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c89 = \"primary key\",\n      peg$c90 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c91 = function(kc, p, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'primary key';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c92 = function(kc, u, p, i, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'unique key' | 'unique' | 'unique index';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c93 = \"foreign key\",\n      peg$c94 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c95 = function(kc, p, i, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'FOREIGN KEY';\n            keyword: constraint_name['keyword'];\n            index?: column;\n            resource: 'constraint';\n            reference_definition?: reference_definition;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c96 = \"match full\",\n      peg$c97 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c98 = \"match partial\",\n      peg$c99 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c100 = \"match simple\",\n      peg$c101 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c102 = function(kc, t, de, m, od, ou) {\n          /* => {\n              definition: cte_column_definition;\n              table: table_ref_list;\n              keyword: 'references';\n              match: 'match full' | 'match partial' | 'match simple';\n              on_delete?: on_reference;\n              on_update?: on_reference;\n            }*/\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c103 = \"on\",\n      peg$c104 = peg$literalExpectation(\"ON\", true),\n      peg$c105 = \"delete\",\n      peg$c106 = peg$literalExpectation(\"DELETE\", true),\n      peg$c107 = \"update\",\n      peg$c108 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c109 = function(on_kw, kw, ro) {\n          return {\n            type: `${on_kw.toLowerCase()} ${kw.toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c110 = \"restrict\",\n      peg$c111 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c112 = \"cascade\",\n      peg$c113 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c114 = \"set null\",\n      peg$c115 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c116 = \"no action\",\n      peg$c117 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c118 = \"set default\",\n      peg$c119 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c120 = function(kc) {\n          // => 'restrict' | 'cascade' | 'set null' | 'no action' | 'set default'\n          return kc.toLowerCase()\n        },\n      peg$c121 = \"trigger\",\n      peg$c122 = peg$literalExpectation(\"TRIGGER\", true),\n      peg$c123 = \"before\",\n      peg$c124 = peg$literalExpectation(\"BEFORE\", true),\n      peg$c125 = \"after\",\n      peg$c126 = peg$literalExpectation(\"AFTER\", true),\n      peg$c127 = \"instead of\",\n      peg$c128 = peg$literalExpectation(\"INSTEAD OF\", true),\n      peg$c129 = \"execute\",\n      peg$c130 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c131 = \"procedure\",\n      peg$c132 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c133 = function(kw, kc, t, c, p, te, on, tn, fr, de, fe, tw, fc, fct) {\n          /*\n          => {\n            type: 'create';\n            constraint: string;\n            location: 'before' | 'after' | 'instead of';\n            events: trigger_event_list;\n            table: table_name;\n            from?: table_name;\n            deferrable?: trigger_deferrable;\n            for_each?: trigger_for_row;\n            when?: trigger_when;\n            execute: {\n              keyword: 'execute procedure';\n              expr: proc_func_call;\n            };\n            constraint_type: 'trigger';\n            keyword: 'trigger';\n            constraint_kw: 'constraint';\n            resource: 'constraint';\n          }\n          */\n          return {\n              type: 'create',\n              constraint: c,\n              location: p && p.toLowerCase(),\n              events: te,\n              table: tn,\n              from: fr && fr[2],\n              deferrable: de,\n              for_each: fe,\n              when: tw,\n              execute: {\n                keyword: 'execute procedure',\n                expr: fct\n              },\n              constraint_type: t && t.toLowerCase(),\n              keyword: t && t.toLowerCase(),\n              constraint_kw: kc && kc.toLowerCase(),\n              resource: 'constraint',\n            }\n        },\n      peg$c134 = function(kw) {\n          // => { keyword: 'insert' | 'delete' | 'truncate' }\n          const keyword = Array.isArray(kw) ? kw[0].toLowerCase() : kw.toLowerCase()\n          return {\n            keyword,\n          }\n        },\n      peg$c135 = \"of\",\n      peg$c136 = peg$literalExpectation(\"OF\", true),\n      peg$c137 = function(kw, a) {\n          // => { keyword: 'update'; args?: { keyword: 'of', columns: column_ref_list; }}\n          return {\n            keyword: kw && kw[0] && kw[0].toLowerCase(),\n            args: a && { keyword: a[0], columns: a[2] } || null\n          }\n        },\n      peg$c138 = function(head, tail) {\n          // => trigger_event[];\n          return createList(head, tail)\n        },\n      peg$c139 = \"not\",\n      peg$c140 = peg$literalExpectation(\"NOT\", true),\n      peg$c141 = \"deferrable\",\n      peg$c142 = peg$literalExpectation(\"DEFERRABLE\", true),\n      peg$c143 = \"initially immediate\",\n      peg$c144 = peg$literalExpectation(\"INITIALLY IMMEDIATE\", true),\n      peg$c145 = \"initially deferred\",\n      peg$c146 = peg$literalExpectation(\"INITIALLY DEFERRED\", true),\n      peg$c147 = function(kw, args) {\n          // => { keyword: 'deferrable' | 'not deferrable'; args: 'initially immediate' | 'initially deferred' }\n          return {\n            keyword: kw && kw[0] ? `${kw[0].toLowerCase()} deferrable` : 'deferrable',\n            args: args && args.toLowerCase(),\n          }\n        },\n      peg$c148 = \"for\",\n      peg$c149 = peg$literalExpectation(\"FOR\", true),\n      peg$c150 = \"each\",\n      peg$c151 = peg$literalExpectation(\"EACH\", true),\n      peg$c152 = \"row\",\n      peg$c153 = peg$literalExpectation(\"ROW\", true),\n      peg$c154 = \"statement\",\n      peg$c155 = peg$literalExpectation(\"STATEMENT\", true),\n      peg$c156 = function(kw, e, ob) {\n          // => { keyword: 'for' | 'for each'; args: 'row' | 'statement' }\n          return {\n            keyword: e ? `${kw.toLowerCase()} ${e.toLowerCase()}` : kw.toLowerCase(),\n            args: ob.toLowerCase()\n          }\n        },\n      peg$c157 = function(condition) {\n          // => { type: 'when'; cond: expr; parentheses: true; }\n          return {\n            type: 'when',\n            cond: condition,\n            parentheses: true,\n          }\n        },\n      peg$c158 = function(head, tail) {\n          // => table_option[]\n          return createList(head, tail)\n        },\n      peg$c159 = \"character\",\n      peg$c160 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c161 = \"set\",\n      peg$c162 = peg$literalExpectation(\"SET\", true),\n      peg$c163 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c164 = \"charset\",\n      peg$c165 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c166 = \"collate\",\n      peg$c167 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c168 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c169 = \"avg_row_length\",\n      peg$c170 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c171 = \"key_block_size\",\n      peg$c172 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c173 = \"max_rows\",\n      peg$c174 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c175 = \"min_rows\",\n      peg$c176 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c177 = \"stats_sample_pages\",\n      peg$c178 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c179 = function(kw, s, v) {\n          /* => {\n            keyword: 'auto_increment' | 'avg_row_length' | 'key_block_size' | 'max_rows' | 'min_rows' | 'stats_sample_pages';\n            symbol: '=';\n            value: number; // <== literal_numeric['value']\n            } */\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c180 = \"connection\",\n      peg$c181 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c182 = function(kw, s, c) {\n          // => { keyword: 'connection' | 'comment'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c183 = \"compression\",\n      peg$c184 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c185 = \"'\",\n      peg$c186 = peg$literalExpectation(\"'\", false),\n      peg$c187 = \"zlib\",\n      peg$c188 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c189 = \"lz4\",\n      peg$c190 = peg$literalExpectation(\"LZ4\", true),\n      peg$c191 = function(kw, s, v) {\n          // => { keyword: 'compression'; symbol: '='; value: \"'ZLIB'\" | \"'LZ4'\" | \"'NONE'\" }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c192 = \"engine\",\n      peg$c193 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c194 = function(kw, s, c) {\n          // => { keyword: 'engine'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c195 = function(fsid) {\n             // => create_fulltext_spatial_index_definition & { action: 'add'; type: 'alter' }\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c196 = function(t) {\n            /*\n            export interface rename_stmt_node {\n              type: 'rename';\n              table: table_to_list;\n            }\n             => AstStatement<rename_stmt_node>\n             */\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c197 = function(kw, a) {\n            /*\n            export interface set_stmt_node {\n              type: 'set';\n              expr: assign_stmt & { keyword?: 'GLOBAL' | 'SESSION' | 'LOCAL' | 'PERSIST' | 'PERSIST_ONLY'; };\n            }\n             => AstStatement<set_stmt_node>\n             */\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c198 = \"in\",\n      peg$c199 = peg$literalExpectation(\"IN\", true),\n      peg$c200 = \"access share\",\n      peg$c201 = peg$literalExpectation(\"ACCESS SHARE\", true),\n      peg$c202 = \"row share\",\n      peg$c203 = peg$literalExpectation(\"ROW SHARE\", true),\n      peg$c204 = \"row exclusive\",\n      peg$c205 = peg$literalExpectation(\"ROW EXCLUSIVE\", true),\n      peg$c206 = \"share update exclusive\",\n      peg$c207 = peg$literalExpectation(\"SHARE UPDATE EXCLUSIVE\", true),\n      peg$c208 = \"share row exclusive\",\n      peg$c209 = peg$literalExpectation(\"SHARE ROW EXCLUSIVE\", true),\n      peg$c210 = \"access exclusive\",\n      peg$c211 = peg$literalExpectation(\"ACCESS EXCLUSIVE\", true),\n      peg$c212 = \"share\",\n      peg$c213 = peg$literalExpectation(\"SHARE\", true),\n      peg$c214 = \"mode\",\n      peg$c215 = peg$literalExpectation(\"MODE\", true),\n      peg$c216 = function(m) {\n          // => { mode: string; }\n          return {\n            mode: `in ${m.toLowerCase()} mode`\n          }\n        },\n      peg$c217 = \"nowait\",\n      peg$c218 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c219 = function(k, t, lm, nw) {\n\n            /*\n            export interface lock_stmt_node {\n              type: 'lock';\n              keyword: 'lock';\n              tables: [[table_base], ...{table: table_ref}[]]; // see table_ref_list\n              lock_mode?: lock_mode;\n              nowait?: 'NOWAIT';\n            }\n             => AstStatement<lock_stmt_node>\n             */\n\n          if (t) t.forEach(tt => tableList.add(`lock::${tt.db}::${tt.table}`))\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: k && k.toLowerCase(),\n              tables: t.map((table) => ({ table })),\n              lock_mode: lm,\n              nowait: nw\n            }\n          }\n        },\n      peg$c220 = function(e) {\n          /*\n          export interface call_stmt_node {\n            type: 'call';\n            expr: proc_func_call;\n          }\n             => AstStatement<call_stmt_node>\n             */\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c221 = \"(\",\n      peg$c222 = peg$literalExpectation(\"(\", false),\n      peg$c223 = \")\",\n      peg$c224 = peg$literalExpectation(\")\", false),\n      peg$c225 = function(s) {\n          /*\n          export interface select_stmt_node extends select_stmt_nake  {\n             parentheses_symbol: true;\n            }\n            => select_stmt_node\n            */\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c226 = function(head, tail) {\n            // => cte_definition[]\n            return createList(head, tail);\n          },\n      peg$c227 = function(cte) {\n            // => [cte_definition & {recursive: true; }]\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c228 = function(name, columns, stmt) {\n          // => { name: { type: 'default'; value: string; }; stmt: union_stmt; columns?: cte_column_definition; }\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt, columns };\n        },\n      peg$c229 = function(head, tail) {\n          // => column[]\n            return createList(head, tail);\n          },\n      peg$c230 = function(cte, opts, d, c, f, w, g, h, o, l) {\n            /* => {\n                with?: with_clause;\n                type: 'select';\n                options?: option_clause;\n                distinct?: 'DISTINCT';\n                columns: column_clause;\n                from?: from_clause;\n                where?: where_clause;\n                groupby?: group_by_clause;\n                having?: having_clause;\n                orderby?: order_by_clause;\n                limit?: limit_clause;\n              }*/\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                from: f,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l\n            };\n        },\n      peg$c231 = function(head, tail) {\n          // => query_option[]\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c232 = function(option) {\n            // =>  'SQL_CALC_FOUND_ROWS'| 'SQL_CACHE'| 'SQL_NO_CACHE'| 'SQL_BIG_RESULT'| 'SQL_SMALL_RESULT'| 'SQL_BUFFER_RESULT'\n            return option;\n          },\n      peg$c233 = function(head, tail) {\n            // => 'ALL' | '*' | column_list_item[]\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c234 = function(head, tail) {\n          // => column_list_item[]\n            return createList(head, tail);\n          },\n      peg$c235 = function(e, s, t) {\n          // => { type: 'cast'; expr: expr; symbol: '::'; target: data_type;  as?: null; }\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c236 = function(tbl) {\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n              expr: {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c237 = function(e, alias) {\n          // => { type: 'expr'; expr: expr; as?: alias_clause; }\n            return { type: 'expr', expr: e, as: alias };\n          },\n      peg$c238 = function(i) { /*=>alias_ident*/ return i; },\n      peg$c239 = function(i) { /*=>ident*/ return i; },\n      peg$c240 = function(l) { /*=>table_ref_list*/return l; },\n      peg$c241 = function(head, tail) {\n          // => table_to_item[]\n            return createList(head, tail);\n          },\n      peg$c242 = function(head, tail) {\n          // => table_name[]\n            return [head, tail]\n          },\n      peg$c243 = \"btree\",\n      peg$c244 = peg$literalExpectation(\"BTREE\", true),\n      peg$c245 = \"hash\",\n      peg$c246 = peg$literalExpectation(\"HASH\", true),\n      peg$c247 = \"gist\",\n      peg$c248 = peg$literalExpectation(\"GIST\", true),\n      peg$c249 = \"gin\",\n      peg$c250 = peg$literalExpectation(\"GIN\", true),\n      peg$c251 = function(t) {\n          // => { keyword: 'using'; type: 'btree' | 'hash' | 'gist' | 'gin' }\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c252 = function(head, tail) {\n          // => index_option[]\n          return createList(head, tail)\n        },\n      peg$c253 = function(head, tail) {\n          // => index_option[]\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c254 = function(k, e, kbs) {\n          // => { type: 'key_block_size'; symbol: '='; expr: number; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          }\n        },\n      peg$c255 = function(k, e, kbs) {\n          // => { type: ident_name; symbol: '='; expr: number | {type: 'origin'; value: ident; }; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: typeof kbs === 'string' && { type: 'origin', value: kbs } || kbs\n          };\n        },\n      peg$c256 = \"with\",\n      peg$c257 = peg$literalExpectation(\"WITH\", true),\n      peg$c258 = \"parser\",\n      peg$c259 = peg$literalExpectation(\"PARSER\", true),\n      peg$c260 = function(pn) {\n          // => { type: 'with parser'; expr: ident_name }\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c261 = \"visible\",\n      peg$c262 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c263 = \"invisible\",\n      peg$c264 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c265 = function(k) {\n          // => { type: 'visible'; expr: 'visible' } | { type: 'invisible'; expr: 'invisible' }\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c266 = function(head, tail) {\n            // => [table_base, ...table_ref[]]\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c267 = function(t) { /* => table_base */ return t; },\n      peg$c268 = function(t) { /* => table_join */ return t; },\n      peg$c269 = function(op, t, head, tail) {\n            // => table_base & {join: join_op; using: ident_name[]; }\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c270 = function(op, t, expr) {\n          // => table_base & {join: join_op; on?: on_clause; }\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c271 = function(op, stmt, alias, expr) {\n          /* => {\n            expr: union_stmt & { parentheses: true; };\n            as?: alias_clause;\n            join: join_op;\n            on?: on_clause;\n          }*/\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c272 = function() {\n          // => { type: 'dual' }\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c273 = function(t, alias) {\n          // => table_name & { as?: alias_clause; }\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c274 = function(stmt, alias) {\n          // => { expr: union_stmt; as?: alias_clause; }\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c275 = function() { /* => 'LEFT JOIN' */ return 'LEFT JOIN'; },\n      peg$c276 = function() { /* =>  'RIGHT JOIN' */ return 'RIGHT JOIN'; },\n      peg$c277 = function() { /* => 'FULL JOIN' */ return 'FULL JOIN'; },\n      peg$c278 = function() { /* => 'INNER JOIN' */ return 'INNER JOIN'; },\n      peg$c279 = function(dt, schema, tail) {\n            // => { db?: ident; table: ident | '*'; }\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = `${dt}.${schema[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c280 = function(dt) {\n          // => IGNORE\n            tableList.add(`select::${dt}::(.*)`);\n            return {\n              db: dt,\n              table: '*'\n            }\n          },\n      peg$c281 = function(dt, tail) {\n          // => IGNORE\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c282 = function(v) {\n          // => IGNORE\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c283 = function(e) { /* => expr */ return e; },\n      peg$c284 = function(e) { /* => expr_list['value'] */ return e.value; },\n      peg$c285 = function(head, tail) {\n          // => column_ref[]\n            return createList(head, tail);\n          },\n      peg$c286 = function(l) { /* => order_by_list */ return l; },\n      peg$c287 = function(head, tail) {\n          // => order_by_element[]\n            return createList(head, tail);\n          },\n      peg$c288 = function(e, d) {\n          // => { expr: expr; type: 'ASC' | 'DESC'; }\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c289 = function(i1, tail) {\n          // => { separator: 'offset' | ''; value: [number_or_param | { type: 'origin', value: 'all' }, number_or_param?] }\n            const res = []\n            if (typeof i1 === 'string') res.push({ type: 'origin', value: 'all' })\n            else res.push(i1)\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c290 = function(t, l, w, r) {\n            /* export interface update_stmt_node {\n               type: 'update';\n               table: table_ref_list;\n               set: set_list;\n               where?: where_clause;\n               returning?: returning_stmt;\n            }\n           => AstStatement<update_stmt_node>\n           */\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table } = tableInfo\n              tableList.add(`update::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                returning: r,\n              }\n            };\n          },\n      peg$c291 = function(t, f, w) {\n            /*\n            export interface table_ref_addition extends table_name {\n              addition: true;\n              as?: alias_clause;\n            }\n             export interface delete_stmt_node {\n               type: 'delete';\n               table?: table_ref_list | [table_ref_addition];\n               where?: where_clause;\n            }\n           => AstStatement<delete_stmt_node>\n           */\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c292 = function(head, tail) {\n            // => set_item[]\n            return createList(head, tail);\n          },\n      peg$c293 = \"=\",\n      peg$c294 = peg$literalExpectation(\"=\", false),\n      peg$c295 = function(tbl, c, v) {\n            // => { column: ident; value: additive_expr; table?: ident;}\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c296 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c297 = function(k, c) {\n          // => { type: 'returning'; columns: column_ref_list | column_ref; }\n          return {\n            type: k && k.toLowerCase() || 'returning',\n            columns: c === '*' && [{ type: 'columne_ref', table: null, column: '*' }] || c\n          }\n        },\n      peg$c298 = function(head, tail) {\n          // => ident_name[]\n            return createList(head, tail)\n          },\n      peg$c299 = function(v) {\n          // => value_item\n          return v\n        },\n      peg$c300 = function(ri, t, p, c, v, r) {\n            /*\n             export interface replace_insert_stmt_node {\n               type: 'insert' | 'replace';\n               table?: [table_name];\n               columns: column_list;\n               values: insert_value_clause;\n               partition?: insert_partition;\n               returning?: returning_stmt;\n            }\n           => AstStatement<replace_insert_stmt_node>\n           */\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c301 = function(ri, ig, it, t, p, v, r) {\n           // => AstStatement<replace_insert_stmt_node>\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n                returning: r,\n              }\n            };\n          },\n      peg$c302 = function() { /* => 'insert' */ return 'insert'; },\n      peg$c303 = function() { /* => 'replace' */return 'replace'; },\n      peg$c304 = function(l) { /* => value_list */ return l; },\n      peg$c305 = function(head, tail) {\n          // => value_item[]\n            return createList(head, tail);\n          },\n      peg$c306 = function(l) {\n          // => expr_list\n            return l;\n          },\n      peg$c307 = function(head, tail) {\n          // => { type: 'expr_list'; value: expr[] }\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c308 = function(e, u) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c309 = function(e) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: '',\n            }\n          },\n      peg$c310 = function(expr, condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr?: expr;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr || null,\n              args: condition_list\n            };\n          },\n      peg$c311 = function(condition, result) {\n          // => { type: 'when'; cond: expr; result: expr; }\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c312 = function(result) {\n          // => { type: 'else'; condition?: never; result: expr; }\n          return { type: 'else', result: result };\n        },\n      peg$c313 = function(head, tail) {\n          /*\n          export type BINARY_OPERATORS = LOGIC_OPERATOR | 'OR' | 'AND' | multiplicative_operator | additive_operator\n            | arithmetic_comparison_operator\n            | 'IN' | 'NOT IN'\n            | 'BETWEEN' | 'NOT BETWEEN'\n            | 'IS' | 'IS NOT'\n            | 'LIKE'\n            | '@>' | '<@' | OPERATOR_CONCATENATION | DOUBLE_WELL_ARROW | WELL_ARROW | '?' | '?|' | '?&' | '#-'\n          export interface binary_expr {\n            type: 'binary_expr',\n            operator: BINARY_OPERATORS,\n            left: expr,\n            right: expr\n          }\n          => binary_expr\n          */\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c314 = function(op, tail) {\n          /*\n          export type UNARY_OPERATORS = '+' | '-' | 'EXISTS' | 'NOT EXISTS'  | 'NULL'\n          => {\n            type: 'unary_expr',\n            operator: UNARY_OPERATORS,\n            expr: expr;\n            parentheses?: boolean;\n          } */\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c315 = function(head, tail) {\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c316 = function(head, tail) {\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c317 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c318 = \"!\",\n      peg$c319 = peg$literalExpectation(\"!\", false),\n      peg$c320 = function(expr) {\n          // => unary_expr\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c321 = function(left, rh) {\n          // => binary_expr\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c322 = function(op, stmt) {\n          // => unary_expr\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c323 = function(nk) { /* => 'NOT EXISTS' */ return nk[0] + ' ' + nk[2]; },\n      peg$c324 = function(l) {\n          // => { type: 'arithmetic'; tail: any }\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c325 = \">=\",\n      peg$c326 = peg$literalExpectation(\">=\", false),\n      peg$c327 = \">\",\n      peg$c328 = peg$literalExpectation(\">\", false),\n      peg$c329 = \"<=\",\n      peg$c330 = peg$literalExpectation(\"<=\", false),\n      peg$c331 = \"<>\",\n      peg$c332 = peg$literalExpectation(\"<>\", false),\n      peg$c333 = \"<\",\n      peg$c334 = peg$literalExpectation(\"<\", false),\n      peg$c335 = \"!=\",\n      peg$c336 = peg$literalExpectation(\"!=\", false),\n      peg$c337 = function(right) {\n          // => { op: 'IS'; right: additive_expr; }\n            return { op: 'IS', right: right };\n          },\n      peg$c338 = function(right) {\n          // => { type: 'origin'; value: string; }\n          const { db, table } = right.pop()\n          const tableName = table === '*' ? '*' : `\"${table}\"`\n          let tableStr = db ? `\"${db}\".${tableName}` : tableName\n          return { op: 'IS', right: {\n            type: 'origin',\n            value: `DISTINCT FROM ${tableStr}`\n          }}\n        },\n      peg$c339 = function(right) {\n            // => { type: 'IS NOT'; right: additive_expr; }\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c340 = function(op, begin, end) {\n          // => { op: 'BETWEEN' | 'NOT BETWEEN'; right: { type: 'expr_list'; value: [expr, expr] }  }\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c341 = function(nk) { /* => 'NOT BETWEEN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c342 = function(nk) { /* => 'LIKE' */ return nk[0] + ' ' + nk[2]; },\n      peg$c343 = function(nk) { /* => 'NOT IN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c344 = function(op, right) {\n           // => { op: like_op; right: comparison_expr}\n            return { op: op, right: right };\n          },\n      peg$c345 = function(op, l) {\n          // => {op: in_op; right: expr_list | var_decl | literal_string; }\n            return { op: op, right: l };\n          },\n      peg$c346 = function(op, e) {\n          // => IGNORE\n            return { op: op, right: e };\n          },\n      peg$c347 = \"@>\",\n      peg$c348 = peg$literalExpectation(\"@>\", false),\n      peg$c349 = \"<@\",\n      peg$c350 = peg$literalExpectation(\"<@\", false),\n      peg$c351 = \"?\",\n      peg$c352 = peg$literalExpectation(\"?\", false),\n      peg$c353 = \"?|\",\n      peg$c354 = peg$literalExpectation(\"?|\", false),\n      peg$c355 = \"?&\",\n      peg$c356 = peg$literalExpectation(\"?&\", false),\n      peg$c357 = \"#-\",\n      peg$c358 = peg$literalExpectation(\"#-\", false),\n      peg$c359 = function(s, c) {\n          // => { op: string; right: expr }\n          return {\n            op: s,\n            right: c && c.expr || c\n          }\n        },\n      peg$c360 = \"+\",\n      peg$c361 = peg$literalExpectation(\"+\", false),\n      peg$c362 = \"-\",\n      peg$c363 = peg$literalExpectation(\"-\", false),\n      peg$c364 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c365 = \"*\",\n      peg$c366 = peg$literalExpectation(\"*\", false),\n      peg$c367 = \"/\",\n      peg$c368 = peg$literalExpectation(\"/\", false),\n      peg$c369 = \"%\",\n      peg$c370 = peg$literalExpectation(\"%\", false),\n      peg$c371 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c372 = \"$\",\n      peg$c373 = peg$literalExpectation(\"$\", false),\n      peg$c374 = function(prepared_symbol, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$${n.value}`,\n          }\n        },\n      peg$c375 = function(tbl) {\n          // => IGNORE\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n            }\n          },\n      peg$c376 = function(tbl, col, a) {\n          // => IGNORE\n            const tableName = tbl && tbl[0] || null\n            columnList.add(`select::${tableName}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tableName,\n              column: col,\n              arrows: a.map(item => item[0]),\n              properties: a.map(item => item[2])\n            };\n        },\n      peg$c377 = function(tbl, col) {\n            /* => {\n              type: 'column_ref';\n              table: ident;\n              column: column | '*';\n              arrow?: '->>' | '->';\n              property?: literal_string | literal_numeric;\n            } */\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c378 = function(col) {\n          // => IGNORE\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c379 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c380 = function(name) {\n            // => indent_name\n            return name;\n          },\n      peg$c381 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c382 = function(name) {\n            // => string\n            return name;\n          },\n      peg$c383 = function(name) {\n            // => IGNORE\n            return name;\n          },\n      peg$c384 = \"\\\"\",\n      peg$c385 = peg$literalExpectation(\"\\\"\", false),\n      peg$c386 = /^[^\"]/,\n      peg$c387 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c388 = function(chars) { /* => string */ return chars.join(''); },\n      peg$c389 = /^[^']/,\n      peg$c390 = peg$classExpectation([\"'\"], true, false),\n      peg$c391 = \"`\",\n      peg$c392 = peg$literalExpectation(\"`\", false),\n      peg$c393 = /^[^`]/,\n      peg$c394 = peg$classExpectation([\"`\"], true, false),\n      peg$c395 = function(name) { /* => string */ return name; },\n      peg$c396 = function(start, parts) { /* => string */ return start + parts.join(''); },\n      peg$c397 = function(start, parts) {\n            // => string\n            return start + parts.join('');\n          },\n      peg$c398 = /^[A-Za-z_]/,\n      peg$c399 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c400 = /^[A-Za-z0-9_\\-]/,\n      peg$c401 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c402 = /^[A-Za-z0-9_]/,\n      peg$c403 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c404 = \":\",\n      peg$c405 = peg$literalExpectation(\":\", false),\n      peg$c406 = function(l) {\n          // => { type: 'param'; value: ident_name }\n            return { type: 'param', value: l[1] };\n          },\n      peg$c407 = function(name, d, e) {\n          // => { type: 'aggr_func'; name: 'SUM' | 'MAX' | 'MIN' | 'AVG'; args: { expr: additive_expr } }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e,\n                distinct: d\n              }\n            };\n          },\n      peg$c408 = function(name) {\n            return {\n              type: 'aggr_func',\n              name: name\n            };\n          },\n      peg$c409 = function(name, e, s) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e,\n                separator: s\n              }\n            };\n          },\n      peg$c410 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c411 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c412 = \"over\",\n      peg$c413 = peg$literalExpectation(\"OVER\", true),\n      peg$c414 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c415 = function(name, arg) {\n          // => { type: 'aggr_func'; name: 'COUNT'; args:count_arg; }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg\n            };\n          },\n      peg$c416 = function(e) { /* => { expr: star_expr } */ return { expr: e }; },\n      peg$c417 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c418 = function(d, c, or) { return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c419 = function() { /* => { type: 'star'; value: '*' } */ return { type: 'star', value: '*' }; },\n      peg$c420 = \"both\",\n      peg$c421 = peg$literalExpectation(\"BOTH\", true),\n      peg$c422 = \"leading\",\n      peg$c423 = peg$literalExpectation(\"LEADING\", true),\n      peg$c424 = \"trailing\",\n      peg$c425 = peg$literalExpectation(\"TRAILING\", true),\n      peg$c426 = function(p, rm, k) {\n          // => expr_list\n          let value = []\n          if (p) value.push({type: 'origin', value: p })\n          if (rm) value.push(rm)\n          value.push({type: 'origin', value: 'from' })\n          return {\n            type: 'expr_list',\n            value,\n          }\n        },\n      peg$c427 = \"trim\",\n      peg$c428 = peg$literalExpectation(\"trim\", true),\n      peg$c429 = function(tr, s) {\n          // => { type: 'function'; name: string; args: expr_list; }\n          let args = tr || { type: 'expr_list', value: [] }\n          args.value.push(s)\n          return {\n              type: 'function',\n              name: 'TRIM',\n              args,\n          };\n        },\n      peg$c430 = function(name, l, bc) {\n            // => { type: 'function'; name: string; args: expr_list; }\n            if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc,\n            };\n          },\n      peg$c431 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c432 = function(f, up) {\n          // => { type: 'function'; name: string; over?: on_update_current_timestamp; }\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c433 = \"century\",\n      peg$c434 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c435 = \"day\",\n      peg$c436 = peg$literalExpectation(\"DAY\", true),\n      peg$c437 = \"date\",\n      peg$c438 = peg$literalExpectation(\"DATE\", true),\n      peg$c439 = \"decade\",\n      peg$c440 = peg$literalExpectation(\"DECADE\", true),\n      peg$c441 = \"dow\",\n      peg$c442 = peg$literalExpectation(\"DOW\", true),\n      peg$c443 = \"doy\",\n      peg$c444 = peg$literalExpectation(\"DOY\", true),\n      peg$c445 = \"epoch\",\n      peg$c446 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c447 = \"hour\",\n      peg$c448 = peg$literalExpectation(\"HOUR\", true),\n      peg$c449 = \"isodow\",\n      peg$c450 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c451 = \"isoyear\",\n      peg$c452 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c453 = \"microseconds\",\n      peg$c454 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c455 = \"millennium\",\n      peg$c456 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c457 = \"milliseconds\",\n      peg$c458 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c459 = \"minute\",\n      peg$c460 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c461 = \"month\",\n      peg$c462 = peg$literalExpectation(\"MONTH\", true),\n      peg$c463 = \"quarter\",\n      peg$c464 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c465 = \"second\",\n      peg$c466 = peg$literalExpectation(\"SECOND\", true),\n      peg$c467 = \"timezone\",\n      peg$c468 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c469 = \"timezone_hour\",\n      peg$c470 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c471 = \"timezone_minute\",\n      peg$c472 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c473 = \"week\",\n      peg$c474 = peg$literalExpectation(\"WEEK\", true),\n      peg$c475 = \"year\",\n      peg$c476 = peg$literalExpectation(\"YEAR\", true),\n      peg$c477 = function(f) {\n          // => 'string'\n          return f\n        },\n      peg$c478 = function(kw, f, t, s) {\n          // => { type: 'extract'; args: { field: extract_filed; cast_type: 'TIMESTAMP' | 'INTERVAL' | 'TIME'; source: expr; }}\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c479 = function(e, s, t) {\n          /* => {\n              type: 'cast';\n              expr: expr | literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c480 = function(e, t) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c481 = function(e, precision) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c482 = function(e, precision, scale) {\n            // => IGNORE\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c483 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c484 = function(head, tail) {\n          // => literal[]\n            return createList(head, tail);\n          },\n      peg$c485 = function() {\n          // => { type: 'null'; value: null }\n            return { type: 'null', value: null };\n          },\n      peg$c486 = function() {\n          // => { type: 'not null'; value: 'not null' }\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c487 = function() {\n            // => { type: 'bool', value: true }\n            return { type: 'bool', value: true };\n          },\n      peg$c488 = function() {\n            //=> { type: 'bool', value: false }\n            return { type: 'bool', value: false };\n          },\n      peg$c489 = function(ca) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c490 = function(ca) {\n            // => { type: 'string'; value: string; }\n            return {\n              type: 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c491 = function(type, ca) {\n            //=> { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c492 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c493 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c494 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c495 = /^[^'\\\\]/,\n      peg$c496 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c497 = \"\\\\'\",\n      peg$c498 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c499 = function() { return \"\\\\'\";  },\n      peg$c500 = \"\\\\\\\"\",\n      peg$c501 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c502 = function() { return '\\\\\"';  },\n      peg$c503 = \"\\\\\\\\\",\n      peg$c504 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c505 = function() { return \"\\\\\\\\\"; },\n      peg$c506 = \"\\\\/\",\n      peg$c507 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c508 = function() { return \"\\\\/\";  },\n      peg$c509 = \"\\\\b\",\n      peg$c510 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c511 = function() { return \"\\b\"; },\n      peg$c512 = \"\\\\f\",\n      peg$c513 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c514 = function() { return \"\\f\"; },\n      peg$c515 = \"\\\\n\",\n      peg$c516 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c517 = function() { return \"\\n\"; },\n      peg$c518 = \"\\\\r\",\n      peg$c519 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c520 = function() { return \"\\r\"; },\n      peg$c521 = \"\\\\t\",\n      peg$c522 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c523 = function() { return \"\\t\"; },\n      peg$c524 = \"\\\\u\",\n      peg$c525 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c526 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c527 = \"\\\\\",\n      peg$c528 = peg$literalExpectation(\"\\\\\", false),\n      peg$c529 = function() { return \"\\\\\"; },\n      peg$c530 = \"''\",\n      peg$c531 = peg$literalExpectation(\"''\", false),\n      peg$c532 = function() { return \"''\" },\n      peg$c533 = \"\\\"\\\"\",\n      peg$c534 = peg$literalExpectation(\"\\\"\\\"\", false),\n      peg$c535 = function() { return '\"\"' },\n      peg$c536 = \"``\",\n      peg$c537 = peg$literalExpectation(\"``\", false),\n      peg$c538 = function() { return '``' },\n      peg$c539 = /^[\\n\\r]/,\n      peg$c540 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c541 = function(n) {\n          // => number | { type: 'bigint'; value: string; }\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c542 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c543 = function(int_, frac) {\n          // => IGNORE\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c544 = function(int_, exp) {\n          // => IGNORE\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c545 = function(int_) {\n          // => IGNORE\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c546 = function(op, digits) { return op + digits; },\n      peg$c547 = function(op, digit) { return op + digit; },\n      peg$c548 = \".\",\n      peg$c549 = peg$literalExpectation(\".\", false),\n      peg$c550 = function(digits) { return \".\" + digits; },\n      peg$c551 = function(e, digits) { return e + digits; },\n      peg$c552 = function(digits) { return digits.join(\"\"); },\n      peg$c553 = /^[0-9]/,\n      peg$c554 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c555 = /^[0-9a-fA-F]/,\n      peg$c556 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c557 = /^[eE]/,\n      peg$c558 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c559 = /^[+\\-]/,\n      peg$c560 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c561 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c562 = \"null\",\n      peg$c563 = peg$literalExpectation(\"NULL\", true),\n      peg$c564 = \"not null\",\n      peg$c565 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c566 = \"true\",\n      peg$c567 = peg$literalExpectation(\"TRUE\", true),\n      peg$c568 = \"to\",\n      peg$c569 = peg$literalExpectation(\"TO\", true),\n      peg$c570 = \"false\",\n      peg$c571 = peg$literalExpectation(\"FALSE\", true),\n      peg$c572 = \"show\",\n      peg$c573 = peg$literalExpectation(\"SHOW\", true),\n      peg$c574 = \"drop\",\n      peg$c575 = peg$literalExpectation(\"DROP\", true),\n      peg$c576 = function() { return 'DROP'; },\n      peg$c577 = \"use\",\n      peg$c578 = peg$literalExpectation(\"USE\", true),\n      peg$c579 = \"alter\",\n      peg$c580 = peg$literalExpectation(\"ALTER\", true),\n      peg$c581 = \"select\",\n      peg$c582 = peg$literalExpectation(\"SELECT\", true),\n      peg$c583 = \"create\",\n      peg$c584 = peg$literalExpectation(\"CREATE\", true),\n      peg$c585 = \"temporary\",\n      peg$c586 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c587 = \"insert\",\n      peg$c588 = peg$literalExpectation(\"INSERT\", true),\n      peg$c589 = \"RECURSIVE\",\n      peg$c590 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c591 = \"replace\",\n      peg$c592 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c593 = \"returning\",\n      peg$c594 = peg$literalExpectation(\"RETURNING\", true),\n      peg$c595 = function() { return 'RETURNING' },\n      peg$c596 = \"rename\",\n      peg$c597 = peg$literalExpectation(\"RENAME\", true),\n      peg$c598 = \"ignore\",\n      peg$c599 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c600 = \"explain\",\n      peg$c601 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c602 = \"partition\",\n      peg$c603 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c604 = function() { return 'PARTITION' },\n      peg$c605 = \"into\",\n      peg$c606 = peg$literalExpectation(\"INTO\", true),\n      peg$c607 = \"from\",\n      peg$c608 = peg$literalExpectation(\"FROM\", true),\n      peg$c609 = \"as\",\n      peg$c610 = peg$literalExpectation(\"AS\", true),\n      peg$c611 = \"table\",\n      peg$c612 = peg$literalExpectation(\"TABLE\", true),\n      peg$c613 = function() { return 'TABLE'; },\n      peg$c614 = \"tablespace\",\n      peg$c615 = peg$literalExpectation(\"TABLESPACE\", true),\n      peg$c616 = function() { return 'TABLESPACE'; },\n      peg$c617 = \"database\",\n      peg$c618 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c619 = function() { return 'DATABASE'; },\n      peg$c620 = \"scheme\",\n      peg$c621 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c622 = function() { return 'SCHEME'; },\n      peg$c623 = function() { return 'COLLATE'; },\n      peg$c624 = \"left\",\n      peg$c625 = peg$literalExpectation(\"LEFT\", true),\n      peg$c626 = \"right\",\n      peg$c627 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c628 = \"full\",\n      peg$c629 = peg$literalExpectation(\"FULL\", true),\n      peg$c630 = \"inner\",\n      peg$c631 = peg$literalExpectation(\"INNER\", true),\n      peg$c632 = \"join\",\n      peg$c633 = peg$literalExpectation(\"JOIN\", true),\n      peg$c634 = \"outer\",\n      peg$c635 = peg$literalExpectation(\"OUTER\", true),\n      peg$c636 = \"union\",\n      peg$c637 = peg$literalExpectation(\"UNION\", true),\n      peg$c638 = \"values\",\n      peg$c639 = peg$literalExpectation(\"VALUES\", true),\n      peg$c640 = \"using\",\n      peg$c641 = peg$literalExpectation(\"USING\", true),\n      peg$c642 = \"where\",\n      peg$c643 = peg$literalExpectation(\"WHERE\", true),\n      peg$c644 = \"group\",\n      peg$c645 = peg$literalExpectation(\"GROUP\", true),\n      peg$c646 = \"by\",\n      peg$c647 = peg$literalExpectation(\"BY\", true),\n      peg$c648 = \"order\",\n      peg$c649 = peg$literalExpectation(\"ORDER\", true),\n      peg$c650 = \"having\",\n      peg$c651 = peg$literalExpectation(\"HAVING\", true),\n      peg$c652 = \"limit\",\n      peg$c653 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c654 = \"offset\",\n      peg$c655 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c656 = function() { return 'OFFSET' },\n      peg$c657 = \"asc\",\n      peg$c658 = peg$literalExpectation(\"ASC\", true),\n      peg$c659 = function() { return 'ASC'; },\n      peg$c660 = \"desc\",\n      peg$c661 = peg$literalExpectation(\"DESC\", true),\n      peg$c662 = function() { return 'DESC'; },\n      peg$c663 = \"all\",\n      peg$c664 = peg$literalExpectation(\"ALL\", true),\n      peg$c665 = function() { return 'ALL'; },\n      peg$c666 = \"distinct\",\n      peg$c667 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c668 = function() { return 'DISTINCT';},\n      peg$c669 = \"between\",\n      peg$c670 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c671 = function() { return 'BETWEEN'; },\n      peg$c672 = function() { return 'IN'; },\n      peg$c673 = \"is\",\n      peg$c674 = peg$literalExpectation(\"IS\", true),\n      peg$c675 = function() { return 'IS'; },\n      peg$c676 = \"like\",\n      peg$c677 = peg$literalExpectation(\"LIKE\", true),\n      peg$c678 = function() { return 'LIKE'; },\n      peg$c679 = \"exists\",\n      peg$c680 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c681 = function() { /* => 'EXISTS' */ return 'EXISTS'; },\n      peg$c682 = function() { return 'NOT'; },\n      peg$c683 = \"and\",\n      peg$c684 = peg$literalExpectation(\"AND\", true),\n      peg$c685 = function() { return 'AND'; },\n      peg$c686 = \"or\",\n      peg$c687 = peg$literalExpectation(\"OR\", true),\n      peg$c688 = function() { return 'OR'; },\n      peg$c689 = \"count\",\n      peg$c690 = peg$literalExpectation(\"COUNT\", true),\n      peg$c691 = function() { return 'COUNT'; },\n      peg$c692 = \"max\",\n      peg$c693 = peg$literalExpectation(\"MAX\", true),\n      peg$c694 = function() { return 'MAX'; },\n      peg$c695 = \"min\",\n      peg$c696 = peg$literalExpectation(\"MIN\", true),\n      peg$c697 = function() { return 'MIN'; },\n      peg$c698 = \"sum\",\n      peg$c699 = peg$literalExpectation(\"SUM\", true),\n      peg$c700 = function() { return 'SUM'; },\n      peg$c701 = \"avg\",\n      peg$c702 = peg$literalExpectation(\"AVG\", true),\n      peg$c703 = function() { return 'AVG'; },\n      peg$c704 = \"collect\",\n      peg$c705 = peg$literalExpectation(\"COLLECT\", true),\n      peg$c706 = function() { return 'COLLECT'; },\n      peg$c707 = \"rank\",\n      peg$c708 = peg$literalExpectation(\"RANK\", true),\n      peg$c709 = function() { return 'RANK'; },\n      peg$c710 = \"dense_rank\",\n      peg$c711 = peg$literalExpectation(\"DENSE_RANK\", true),\n      peg$c712 = function() { return 'DENSE_RANK'; },\n      peg$c713 = \"listagg\",\n      peg$c714 = peg$literalExpectation(\"LISTAGG\", true),\n      peg$c715 = function() { return 'LISTAGG'; },\n      peg$c716 = \"row_number\",\n      peg$c717 = peg$literalExpectation(\"ROW_NUMBER\", true),\n      peg$c718 = function() { return 'ROW_NUMBER'; },\n      peg$c719 = \"tumble_start\",\n      peg$c720 = peg$literalExpectation(\"TUMBLE_START\", true),\n      peg$c721 = function() { return 'TUMBLE_START'; },\n      peg$c722 = \"tumble_end\",\n      peg$c723 = peg$literalExpectation(\"TUMBLE_END\", true),\n      peg$c724 = function() { return 'TUMEBLE_END'; },\n      peg$c725 = \"hop_start\",\n      peg$c726 = peg$literalExpectation(\"HOP_START\", true),\n      peg$c727 = function() { return 'HOP_START'; },\n      peg$c728 = \"hop_end\",\n      peg$c729 = peg$literalExpectation(\"HOP_END\", true),\n      peg$c730 = function() { return 'HOP_END'; },\n      peg$c731 = \"session_start\",\n      peg$c732 = peg$literalExpectation(\"SESSION_START\", true),\n      peg$c733 = function() { return 'SESSION_START'; },\n      peg$c734 = \"session_end\",\n      peg$c735 = peg$literalExpectation(\"SESSION_END\", true),\n      peg$c736 = function() { return 'SESSION_END'; },\n      peg$c737 = \"tumble_rowtime\",\n      peg$c738 = peg$literalExpectation(\"TUMBLE_ROWTIME\", true),\n      peg$c739 = function() { return 'TUMBLE_ROWTIME'; },\n      peg$c740 = \"hop_rowtime\",\n      peg$c741 = peg$literalExpectation(\"HOP_ROWTIME\", true),\n      peg$c742 = function() { return 'HOP_ROWTIME'; },\n      peg$c743 = \"session_rowtime\",\n      peg$c744 = peg$literalExpectation(\"SESSION_ROWTIME\", true),\n      peg$c745 = function() { return 'SESSION_ROWTIME'; },\n      peg$c746 = \"tumble_proctime\",\n      peg$c747 = peg$literalExpectation(\"TUMBLE_PROCTIME\", true),\n      peg$c748 = function() { return 'TUMBLE_PROCTIME'; },\n      peg$c749 = \"hop_proctime\",\n      peg$c750 = peg$literalExpectation(\"HOP_PROCTIME\", true),\n      peg$c751 = function() { return 'HOP_PROCTIME'; },\n      peg$c752 = \"session_proctime\",\n      peg$c753 = peg$literalExpectation(\"SESSION_PROCTIME\", true),\n      peg$c754 = function() { return 'SESSION_PROCTIME'; },\n      peg$c755 = \"extract\",\n      peg$c756 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c757 = function() { return 'EXTRACT'; },\n      peg$c758 = \"call\",\n      peg$c759 = peg$literalExpectation(\"CALL\", true),\n      peg$c760 = function() { return 'CALL'; },\n      peg$c761 = \"case\",\n      peg$c762 = peg$literalExpectation(\"CASE\", true),\n      peg$c763 = \"when\",\n      peg$c764 = peg$literalExpectation(\"WHEN\", true),\n      peg$c765 = \"then\",\n      peg$c766 = peg$literalExpectation(\"THEN\", true),\n      peg$c767 = \"else\",\n      peg$c768 = peg$literalExpectation(\"ELSE\", true),\n      peg$c769 = \"end\",\n      peg$c770 = peg$literalExpectation(\"END\", true),\n      peg$c771 = \"cast\",\n      peg$c772 = peg$literalExpectation(\"CAST\", true),\n      peg$c773 = \"bool\",\n      peg$c774 = peg$literalExpectation(\"BOOL\", true),\n      peg$c775 = function() { return 'BOOL'; },\n      peg$c776 = \"boolean\",\n      peg$c777 = peg$literalExpectation(\"BOOLEAN\", true),\n      peg$c778 = function() { return 'BOOLEAN'; },\n      peg$c779 = \"char\",\n      peg$c780 = peg$literalExpectation(\"CHAR\", true),\n      peg$c781 = function() { return 'CHAR'; },\n      peg$c782 = \"varchar\",\n      peg$c783 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c784 = function() { return 'VARCHAR';},\n      peg$c785 = \"string\",\n      peg$c786 = peg$literalExpectation(\"STRING\", true),\n      peg$c787 = function() { return 'STRING';},\n      peg$c788 = \"numeric\",\n      peg$c789 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c790 = function() { return 'NUMERIC'; },\n      peg$c791 = \"decimal\",\n      peg$c792 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c793 = function() { return 'DECIMAL'; },\n      peg$c794 = \"signed\",\n      peg$c795 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c796 = function() { return 'SIGNED'; },\n      peg$c797 = \"unsigned\",\n      peg$c798 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c799 = function() { return 'UNSIGNED'; },\n      peg$c800 = \"int\",\n      peg$c801 = peg$literalExpectation(\"INT\", true),\n      peg$c802 = function() { return 'INT'; },\n      peg$c803 = \"zerofill\",\n      peg$c804 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c805 = function() { return 'ZEROFILL'; },\n      peg$c806 = \"integer\",\n      peg$c807 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c808 = function() { return 'INTEGER'; },\n      peg$c809 = \"json\",\n      peg$c810 = peg$literalExpectation(\"JSON\", true),\n      peg$c811 = function() { return 'JSON'; },\n      peg$c812 = \"jsonb\",\n      peg$c813 = peg$literalExpectation(\"JSONB\", true),\n      peg$c814 = function() { return 'JSONB'; },\n      peg$c815 = \"geometry\",\n      peg$c816 = peg$literalExpectation(\"GEOMETRY\", true),\n      peg$c817 = function() { return 'GEOMETRY'; },\n      peg$c818 = \"smallint\",\n      peg$c819 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c820 = function() { return 'SMALLINT'; },\n      peg$c821 = \"tinyint\",\n      peg$c822 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c823 = function() { return 'TINYINT'; },\n      peg$c824 = \"tinytext\",\n      peg$c825 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c826 = function() { return 'TINYTEXT'; },\n      peg$c827 = \"text\",\n      peg$c828 = peg$literalExpectation(\"TEXT\", true),\n      peg$c829 = function() { return 'TEXT'; },\n      peg$c830 = \"mediumtext\",\n      peg$c831 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c832 = function() { return 'MEDIUMTEXT'; },\n      peg$c833 = \"longtext\",\n      peg$c834 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c835 = function() { return 'LONGTEXT'; },\n      peg$c836 = \"bigint\",\n      peg$c837 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c838 = function() { return 'BIGINT'; },\n      peg$c839 = \"float\",\n      peg$c840 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c841 = function() { return 'FLOAT'; },\n      peg$c842 = \"double\",\n      peg$c843 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c844 = function() { return 'DOUBLE'; },\n      peg$c845 = function() { return 'DATE'; },\n      peg$c846 = \"datetime\",\n      peg$c847 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c848 = function() { return 'DATETIME'; },\n      peg$c849 = \"time\",\n      peg$c850 = peg$literalExpectation(\"TIME\", true),\n      peg$c851 = function() { return 'TIME'; },\n      peg$c852 = \"timestamp\",\n      peg$c853 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c854 = function() { return 'TIMESTAMP'; },\n      peg$c855 = \"truncate\",\n      peg$c856 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c857 = function() { return 'TRUNCATE'; },\n      peg$c858 = \"user\",\n      peg$c859 = peg$literalExpectation(\"USER\", true),\n      peg$c860 = function() { return 'USER'; },\n      peg$c861 = \"uuid\",\n      peg$c862 = peg$literalExpectation(\"UUID\", true),\n      peg$c863 = function() { return 'UUID'; },\n      peg$c864 = \"array\",\n      peg$c865 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c866 = function() { return 'ARRAY'; },\n      peg$c867 = \"map\",\n      peg$c868 = peg$literalExpectation(\"MAP\", true),\n      peg$c869 = function() { return 'MAP'; },\n      peg$c870 = \"multiset\",\n      peg$c871 = peg$literalExpectation(\"MULTISET\", true),\n      peg$c872 = function() { return 'MULTISET'; },\n      peg$c873 = function() { return 'ROW'; },\n      peg$c874 = \"current_date\",\n      peg$c875 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c876 = function() { return 'CURRENT_DATE'; },\n      peg$c877 = \"adddate\",\n      peg$c878 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c879 = function() { return 'ADDDATE'; },\n      peg$c880 = \"interval\",\n      peg$c881 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c882 = function() { return 'INTERVAL'; },\n      peg$c883 = function() { return 'YEAR'; },\n      peg$c884 = function() { return 'MONTH'; },\n      peg$c885 = function() { return 'DAY'; },\n      peg$c886 = function() { return 'HOUR'; },\n      peg$c887 = function() { return 'MINUTE'; },\n      peg$c888 = function() { return 'SECOND'; },\n      peg$c889 = \"current_time\",\n      peg$c890 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c891 = function() { return 'CURRENT_TIME'; },\n      peg$c892 = \"current_timestamp\",\n      peg$c893 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c894 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c895 = \"current_user\",\n      peg$c896 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c897 = function() { return 'CURRENT_USER'; },\n      peg$c898 = \"session_user\",\n      peg$c899 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c900 = function() { return 'SESSION_USER'; },\n      peg$c901 = \"system_user\",\n      peg$c902 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c903 = function() { return 'SYSTEM_USER'; },\n      peg$c904 = \"global\",\n      peg$c905 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c906 = function() { return 'GLOBAL'; },\n      peg$c907 = \"session\",\n      peg$c908 = peg$literalExpectation(\"SESSION\", true),\n      peg$c909 = function() { return 'SESSION'; },\n      peg$c910 = \"local\",\n      peg$c911 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c912 = function() { return 'LOCAL'; },\n      peg$c913 = \"persist\",\n      peg$c914 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c915 = function() { return 'PERSIST'; },\n      peg$c916 = \"persist_only\",\n      peg$c917 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c918 = function() { return 'PERSIST_ONLY'; },\n      peg$c919 = \"@\",\n      peg$c920 = peg$literalExpectation(\"@\", false),\n      peg$c921 = \"@@\",\n      peg$c922 = peg$literalExpectation(\"@@\", false),\n      peg$c923 = \"return\",\n      peg$c924 = peg$literalExpectation(\"return\", true),\n      peg$c925 = \":=\",\n      peg$c926 = peg$literalExpectation(\":=\", false),\n      peg$c927 = \"::\",\n      peg$c928 = peg$literalExpectation(\"::\", false),\n      peg$c929 = \"dual\",\n      peg$c930 = peg$literalExpectation(\"DUAL\", true),\n      peg$c931 = \"add\",\n      peg$c932 = peg$literalExpectation(\"ADD\", true),\n      peg$c933 = function() { return 'ADD'; },\n      peg$c934 = \"column\",\n      peg$c935 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c936 = function() { return 'COLUMN'; },\n      peg$c937 = \"index\",\n      peg$c938 = peg$literalExpectation(\"INDEX\", true),\n      peg$c939 = function() { return 'INDEX'; },\n      peg$c940 = function() { return 'KEY'; },\n      peg$c941 = \"fulltext\",\n      peg$c942 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c943 = function() { return 'FULLTEXT'; },\n      peg$c944 = \"spatial\",\n      peg$c945 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c946 = function() { return 'SPATIAL'; },\n      peg$c947 = function() { return 'UNIQUE'; },\n      peg$c948 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c949 = \"comment\",\n      peg$c950 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c951 = function() { return 'COMMENT'; },\n      peg$c952 = \"constraint\",\n      peg$c953 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c954 = function() { return 'CONSTRAINT'; },\n      peg$c955 = \"concurrently\",\n      peg$c956 = peg$literalExpectation(\"CONCURRENTLY\", true),\n      peg$c957 = function() { return 'CONCURRENTLY'; },\n      peg$c958 = \"references\",\n      peg$c959 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c960 = function() { return 'REFERENCES'; },\n      peg$c961 = \"sql_calc_found_rows\",\n      peg$c962 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c963 = \"sql_cache\",\n      peg$c964 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c965 = \"sql_no_cache\",\n      peg$c966 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c967 = \"sql_small_result\",\n      peg$c968 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c969 = \"sql_big_result\",\n      peg$c970 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c971 = \"sql_buffer_result\",\n      peg$c972 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c973 = \",\",\n      peg$c974 = peg$literalExpectation(\",\", false),\n      peg$c975 = \"[\",\n      peg$c976 = peg$literalExpectation(\"[\", false),\n      peg$c977 = \"]\",\n      peg$c978 = peg$literalExpectation(\"]\", false),\n      peg$c979 = \";\",\n      peg$c980 = peg$literalExpectation(\";\", false),\n      peg$c981 = \"->\",\n      peg$c982 = peg$literalExpectation(\"->\", false),\n      peg$c983 = \"->>\",\n      peg$c984 = peg$literalExpectation(\"->>\", false),\n      peg$c985 = \"#>\",\n      peg$c986 = peg$literalExpectation(\"#>\", false),\n      peg$c987 = \"#>>\",\n      peg$c988 = peg$literalExpectation(\"#>>\", false),\n      peg$c989 = \"||\",\n      peg$c990 = peg$literalExpectation(\"||\", false),\n      peg$c991 = \"&&\",\n      peg$c992 = peg$literalExpectation(\"&&\", false),\n      peg$c993 = \"/*\",\n      peg$c994 = peg$literalExpectation(\"/*\", false),\n      peg$c995 = \"*/\",\n      peg$c996 = peg$literalExpectation(\"*/\", false),\n      peg$c997 = \"--\",\n      peg$c998 = peg$literalExpectation(\"--\", false),\n      peg$c999 = \"#\",\n      peg$c1000 = peg$literalExpectation(\"#\", false),\n      peg$c1001 = function(k, s, c) {\n          // => { type: 'comment'; keyword: 'comment'; symbol: '='; value: literal_string; }\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c1002 = peg$anyExpectation(),\n      peg$c1003 = /^[ \\t\\n\\r]/,\n      peg$c1004 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c1005 = function() { varList = []; return true; },\n      peg$c1006 = function(s) {\n            // => { type: 'proc'; stmt: assign_stmt | return_stmt; vars: any }\n            return { type: 'proc', stmt: s, vars: varList };\n          },\n      peg$c1007 = function(va, s, e) {\n          // => { type: 'assign'; left: var_decl | without_prefix_var_decl; symbol: ':=' | '='; right: proc_expr; }\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c1008 = function(e) {\n          // => { type: 'return'; expr: proc_expr; }\n            return { type: 'return', expr: e };\n          },\n      peg$c1009 = function(lt, op, rt, expr) {\n          // => { type: 'join'; ltable: var_decl; rtable: var_decl; op: join_op; expr: on_clause; }\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1010 = function(e) {\n          // => proc_additive_expr & { parentheses: true; }\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1011 = function(dt, tail) {\n          // => string\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1012 = function(name, l) {\n          // => { type: 'function'; name: string; args: null | { type: expr_list; value: proc_primary_list; }}\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1013 = function(name) {\n          // => IGNORE\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1014 = function(head, tail) {\n          // => proc_primary[]\n            return createList(head, tail);\n          },\n      peg$c1015 = function(l) {\n          // => { type: 'array'; value: proc_primary_list }\n          return { type: 'array', value: l };\n        },\n      peg$c1016 = function(p, d) {\n          // => without_prefix_var_decl & { type: 'var'; prefix: string; };\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1017 = function(name, m) {\n          // => { type: 'var'; prefix: string; name: ident_name; members: mem_chain; }\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1018 = function(l) {\n          // => ident_name[];\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1019 = function(t) { /* => data_type */ return { dataType: t }},\n      peg$c1020 = function(t, l) {\n          // => data_type\n          return { dataType: t, length: parseInt(l.join(''), 10) };\n        },\n      peg$c1021 = function(t) { /* =>  data_type */ return { dataType: t }; },\n      peg$c1022 = function(t) { /* =>  data_type */  return { dataType: t }; },\n      peg$c1023 = function(t) { return {dataType: t }; },\n      peg$c1024 = function(un, ze) {\n          // => any[];\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1025 = function(t, l, r, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s }; },\n      peg$c1026 = function(t, l, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), suffix: s }; },\n      peg$c1027 = function(t, s) { /* =>  data_type */ return { dataType: t, suffix: s }; },\n      peg$c1028 = function(t, l) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c1029 = function(t) {/* =>  data_type */  return { dataType: t }; },\n      peg$c1030 = function(t) { /* =>  data_type */ return { dataType: t }},\n      peg$c1031 = function(t) {/* =>  data_type */  return { dataType: t }},\n      peg$c1032 = function(t, subt) { return { dataType: t, subType: subt}; },\n      peg$c1033 = function(t, subk, subv) { return {dataType: t, subType: subv}; },\n      peg$c1034 = function(t) { return {dataType: t} },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecmd_stmt();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_table_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_trigger();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_extension_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_index_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecreate_db_stmt();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecrud_stmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_UNION();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseKW_ALL();\n            if (s7 === peg$FAILED) {\n              s7 = null;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseselect_stmt();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_UNION();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseKW_ALL();\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseselect_stmt();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c2(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c3) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c5();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_extension_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c6) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c7); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseliteral_string();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_WITH();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c8) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parseident_name();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parseliteral_string();\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$currPos;\n                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c10) {\n                              s14 = input.substr(peg$currPos, 7);\n                              peg$currPos += 7;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parse__();\n                              if (s15 !== peg$FAILED) {\n                                s16 = peg$parseident_name();\n                                if (s16 === peg$FAILED) {\n                                  s16 = peg$parseliteral_string();\n                                }\n                                if (s16 !== peg$FAILED) {\n                                  s14 = [s14, s15, s16];\n                                  s13 = s14;\n                                } else {\n                                  peg$currPos = s13;\n                                  s13 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s13;\n                                s13 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s13;\n                              s13 = peg$FAILED;\n                            }\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$currPos;\n                                s16 = peg$parseKW_FROM();\n                                if (s16 !== peg$FAILED) {\n                                  s17 = peg$parse__();\n                                  if (s17 !== peg$FAILED) {\n                                    s18 = peg$parseident_name();\n                                    if (s18 === peg$FAILED) {\n                                      s18 = peg$parseliteral_string();\n                                    }\n                                    if (s18 !== peg$FAILED) {\n                                      s16 = [s16, s17, s18];\n                                      s15 = s16;\n                                    } else {\n                                      peg$currPos = s15;\n                                      s15 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c12(s1, s3, s5, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c14(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c15(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONCURRENTLY();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_ON();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseindex_type();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseLPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsecolumn_order_list();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseRPAREN();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$currPos;\n                                                    s26 = peg$parseKW_TABLESPACE();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseident_name();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s26 = [s26, s27, s28];\n                                                          s25 = s26;\n                                                        } else {\n                                                          peg$currPos = s25;\n                                                          s25 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s25;\n                                                        s25 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s25;\n                                                      s25 = peg$FAILED;\n                                                    }\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parsewhere_clause();\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c17(s1, s3, s5, s7, s9, s11, s13, s15, s19, s23, s25, s27);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c18(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecollate_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c19) {\n                      s10 = input.substr(peg$currPos, 5);\n                      peg$currPos += 5;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c20); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c21) {\n                          s12 = input.substr(peg$currPos, 5);\n                          peg$currPos += 5;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c23) {\n                            s12 = input.substr(peg$currPos, 4);\n                            peg$currPos += 4;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                          }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c25(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c28(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_constraint();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c29) {\n                  s7 = input.substr(peg$currPos, 14);\n                  peg$currPos += 14;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c31) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$currPos;\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c33) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {\n                            s12 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s10 = [s10, s11, s12];\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsekeyword_comment();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsecollate_expr();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecolumn_format();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsestorage();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsereference_definition();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c37(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_constraint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedefault_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_not_null();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_null();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c39(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c40(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c41) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c43) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c45) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c50) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c51); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c52) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c54) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c55); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c59(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c60(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c61(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c62(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c63(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_RENAME_TABLE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_ALGORITHM();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_LOCK();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c64(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c65(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c66(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c67(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c68) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c69); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c70) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c71); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c72) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c73); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c74) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c75); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c76(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c79) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c80); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c81) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c82); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c83) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c86(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c87(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c89) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c91(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c92(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c93) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c94); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c95(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c96) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c97); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c98) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c99); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c100) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c101); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c102(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c105) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c106); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c107) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c108); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse___();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c109(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c110) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c111); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c112) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c113); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c114) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c115); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c116) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c117); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c118) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c119); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c120(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_trigger() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c121) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c122); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c123) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c124); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c125) {\n                        s9 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c126); }\n                      }\n                      if (s9 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c127) {\n                          s9 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c128); }\n                        }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetrigger_event_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n                              s13 = input.substr(peg$currPos, 2);\n                              peg$currPos += 2;\n                            } else {\n                              s13 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_name();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$currPos;\n                                    s18 = peg$parseKW_FROM();\n                                    if (s18 !== peg$FAILED) {\n                                      s19 = peg$parse__();\n                                      if (s19 !== peg$FAILED) {\n                                        s20 = peg$parsetable_name();\n                                        if (s20 !== peg$FAILED) {\n                                          s18 = [s18, s19, s20];\n                                          s17 = s18;\n                                        } else {\n                                          peg$currPos = s17;\n                                          s17 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s17;\n                                        s17 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s17;\n                                      s17 = peg$FAILED;\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsetrigger_deferrable();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsetrigger_for_row();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsetrigger_when();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c129) {\n                                                      s25 = input.substr(peg$currPos, 7);\n                                                      peg$currPos += 7;\n                                                    } else {\n                                                      s25 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c130); }\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c131) {\n                                                          s27 = input.substr(peg$currPos, 9);\n                                                          peg$currPos += 9;\n                                                        } else {\n                                                          s27 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            s29 = peg$parseproc_func_call();\n                                                            if (s29 !== peg$FAILED) {\n                                                              peg$savedPos = s0;\n                                                              s1 = peg$c133(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s29);\n                                                              s0 = s1;\n                                                            } else {\n                                                              peg$currPos = s0;\n                                                              s0 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DELETE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TRUNCATE();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c134(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UPDATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c135) {\n            s4 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c136); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref_list();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c137(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrigger_event();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetrigger_event();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetrigger_event();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c138(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_deferrable() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c139) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c141) {\n          s4 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c142); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 19).toLowerCase() === peg$c143) {\n          s3 = input.substr(peg$currPos, 19);\n          peg$currPos += 19;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 18).toLowerCase() === peg$c145) {\n            s3 = input.substr(peg$currPos, 18);\n            peg$currPos += 18;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c147(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_for_row() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c149); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c150) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c152) {\n              s5 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c153); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c154) {\n                s5 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c155); }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c156(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_when() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c157(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c158(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c159) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c160); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c161) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c162); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c163();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c164) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c165); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c167); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c168(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c29) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c169) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c170); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c171) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c172); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c173) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c174); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c175) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c176); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c177) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c178); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c179(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c180) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c181); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c182(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c183) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c184); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c185;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c186); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c190); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c79) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c80); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c185;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c186); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c191(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c192) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c193); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c194(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c195(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c196(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c197(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_mode() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c198) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c199); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c200) {\n          s3 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c201); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c202) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c203); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c204) {\n              s3 = input.substr(peg$currPos, 13);\n              peg$currPos += 13;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c205); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 22).toLowerCase() === peg$c206) {\n                s3 = input.substr(peg$currPos, 22);\n                peg$currPos += 22;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c207); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 19).toLowerCase() === peg$c208) {\n                  s3 = input.substr(peg$currPos, 19);\n                  peg$currPos += 19;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c209); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c83) {\n                    s3 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c210) {\n                      s3 = input.substr(peg$currPos, 16);\n                      peg$currPos += 16;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c211); }\n                    }\n                    if (s3 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c212) {\n                        s3 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c213); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c214) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c215); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c216(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselock_mode();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c219(s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c220(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c221;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c223;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c224); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c225(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c226(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c227(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseunion_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c228(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c229(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_DISTINCT();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsewhere_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsegroup_by_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsehaving_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parseorder_by_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parselimit_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c230(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22);\n                                                s0 = s1;\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c232(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c233(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c234(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebinary_column_expr();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseexpr();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseKW_DOUBLE_COLON();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c235(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSTAR();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c236(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsebinary_column_expr();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseexpr();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c237(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c238(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c239(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c240(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c241(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c242(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c243) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c244); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c245) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c246); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c247) {\n              s3 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c248); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c249) {\n                s3 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c250); }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c251(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c252(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c253(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c254(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseident();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c255(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c256) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c257); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c258) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c259); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c260(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c261) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c262); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c263) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c264); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c265(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsekeyword_comment();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c266(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c267(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c268(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c269(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c270(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c271(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c272();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c273(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLPAREN();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseunion_stmt();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsealias_clause();\n                    if (s7 === peg$FAILED) {\n                      s7 = null;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c274(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c275();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c276();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c277();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          s2 = peg$parseKW_INNER();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseKW_JOIN();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c278();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c279(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c280(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c281(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c282(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c284(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c285(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c286(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c287(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c288(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ALL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_OFFSET();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c289(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhere_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c290(s3, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c291(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c292(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c293;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c294); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c295(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c293;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c294); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c296(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturning_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURNING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecolumn_ref_list();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c297(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c298(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c299(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsereturning_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c300(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsereturning_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c301(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c302();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c303();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c304(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c305(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c306(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c307(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c308(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INTERVAL();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c309(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsecase_when_then();\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecase_else();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_END();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_CASE();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c310(s3, s5, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c311(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c312(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseor_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunion_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c313(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c314(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_OR();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseLOGIC_OPERATOR();\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c315(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c316(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c318;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c319); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c293;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c294); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c320(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c321(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c322(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c323(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsejsonb_op_right();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c324(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c325) {\n      s0 = peg$c325;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c327;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c328); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c329) {\n          s0 = peg$c329;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c330); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c331) {\n            s0 = peg$c331;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c332); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c333;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c334); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c293;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c294); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c335) {\n                  s0 = peg$c335;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c336); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c337(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_IS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_DISTINCT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseKW_FROM();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetable_name();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c338(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseKW_IS();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_NOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseadditive_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c339(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c340(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c341(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c342(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c343(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c344(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c345(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c346(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejsonb_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c347) {\n      s1 = peg$c347;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c349) {\n        s1 = peg$c349;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c350); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPERATOR_CONCATENATION();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseDOUBLE_WELL_ARROW();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWELL_ARROW();\n            if (s1 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 63) {\n                s1 = peg$c351;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c352); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c353) {\n                  s1 = peg$c353;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c354); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c355) {\n                    s1 = peg$c355;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c356); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c357) {\n                      s1 = peg$c357;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_list_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c359(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c360;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c361); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c362;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c363); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c364(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c365;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c367;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c368); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c369;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c370); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c371(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsevar_decl();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parse__();\n                        if (s1 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 36) {\n                            s2 = peg$c372;\n                            peg$currPos++;\n                          } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c373); }\n                          }\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseliteral_numeric();\n                            if (s3 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c374(s2, s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c375(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$parseDOUBLE_ARROW();\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseSINGLE_ARROW();\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseliteral_string();\n                  if (s9 === peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s7 = [s7, s8, s9];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$currPos;\n                  s7 = peg$parseDOUBLE_ARROW();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseSINGLE_ARROW();\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseliteral_string();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseliteral_numeric();\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s7 = [s7, s8, s9];\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c376(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseDOT();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsecolumn();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c377(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecolumn();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c378(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c229(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c379(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c380(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c380(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c381(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c382(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c384;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c386.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c387); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c386.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c387); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c384;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c385); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c185;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c389.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c390); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c389.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c390); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c185;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c391;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c393.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c394); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c393.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c394); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c391;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c392); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c379(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c395(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c396(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c397(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c398.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c399); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c400.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c401); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c402.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c404;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c405); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c406(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_expr();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AGGR_FUNC();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_DISTINCT();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c407(s1, s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AGGR_FUNC_NO_ARG();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c408(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_LISTAGG();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseadditive_expr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$currPos;\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseCOMMA();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse__();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseliteral_string();\n                        if (s10 !== peg$FAILED) {\n                          s7 = [s7, s8, s9, s10];\n                          s6 = s7;\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                  if (s6 === peg$FAILED) {\n                    s6 = null;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parseRPAREN();\n                      if (s8 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c409(s1, s5, s6);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AGGR_FUNC() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_COLLECT();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AGGR_FUNC_NO_ARG() {\n    var s0;\n\n    s0 = peg$parseKW_RANK();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_DENSE_RANK();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_ROW_NUMBER();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UPDATE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c410(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c411(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c412) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c413); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_PARTITION();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_BY();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_clause();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseorder_by_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c414(s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseon_update_current_timestamp();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c415(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c416(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c417(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c418(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c365;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c419();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetrim_position() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c420) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c422) {\n        s0 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c423); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c424) {\n          s0 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c425); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_rem() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrim_position();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_string();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_FROM();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c426(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_func_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c427) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c428); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetrim_rem();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c429(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsetrim_func_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c430(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c431(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseextract_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsescalar_time_func();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseon_update_current_timestamp();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c432(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c433) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c435) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c436); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c437) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c438); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c439) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c440); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c442); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c443) {\n                s1 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c444); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c445) {\n                  s1 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c446); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c447) {\n                    s1 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c448); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c449) {\n                      s1 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c450); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c451) {\n                        s1 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c452); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c453) {\n                          s1 = input.substr(peg$currPos, 12);\n                          peg$currPos += 12;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c454); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c455) {\n                            s1 = input.substr(peg$currPos, 10);\n                            peg$currPos += 10;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c456); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c457) {\n                              s1 = input.substr(peg$currPos, 12);\n                              peg$currPos += 12;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c458); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c459) {\n                                s1 = input.substr(peg$currPos, 6);\n                                peg$currPos += 6;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c460); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c461) {\n                                  s1 = input.substr(peg$currPos, 5);\n                                  peg$currPos += 5;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c462); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c463) {\n                                    s1 = input.substr(peg$currPos, 7);\n                                    peg$currPos += 7;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c464); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c465) {\n                                      s1 = input.substr(peg$currPos, 6);\n                                      peg$currPos += 6;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c467) {\n                                        s1 = input.substr(peg$currPos, 8);\n                                        peg$currPos += 8;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c468); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c469) {\n                                          s1 = input.substr(peg$currPos, 13);\n                                          peg$currPos += 13;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c470); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 15).toLowerCase() === peg$c471) {\n                                            s1 = input.substr(peg$currPos, 15);\n                                            peg$currPos += 15;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c472); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c473) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c474); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c475) {\n                                                s1 = input.substr(peg$currPos, 4);\n                                                peg$currPos += 4;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c476); }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c477(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c478(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_time_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parsescalar_time_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_USER();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_USER();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_SYSTEM_USER();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseaggr_func();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsefunc_call();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecase_expr();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseinterval_expr();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parsecolumn_ref();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseparam();\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseKW_DOUBLE_COLON();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c479(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsedata_type();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseRPAREN();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c480(s5, s9);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseRPAREN();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseRPAREN();\n                                        if (s17 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c481(s5, s13);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseKW_DECIMAL();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseLPAREN();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseint();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parse__();\n                                    if (s14 !== peg$FAILED) {\n                                      s15 = peg$parseCOMMA();\n                                      if (s15 !== peg$FAILED) {\n                                        s16 = peg$parse__();\n                                        if (s16 !== peg$FAILED) {\n                                          s17 = peg$parseint();\n                                          if (s17 !== peg$FAILED) {\n                                            s18 = peg$parse__();\n                                            if (s18 !== peg$FAILED) {\n                                              s19 = peg$parseRPAREN();\n                                              if (s19 !== peg$FAILED) {\n                                                s20 = peg$parse__();\n                                                if (s20 !== peg$FAILED) {\n                                                  s21 = peg$parseRPAREN();\n                                                  if (s21 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c482(s5, s13, s17);\n                                                    s0 = s1;\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_CAST();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLPAREN();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseexpr();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseKW_AS();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parsesignedness();\n                            if (s9 !== peg$FAILED) {\n                              s10 = peg$parse__();\n                              if (s10 !== peg$FAILED) {\n                                s11 = peg$parseKW_INTEGER();\n                                if (s11 === peg$FAILED) {\n                                  s11 = null;\n                                }\n                                if (s11 !== peg$FAILED) {\n                                  s12 = peg$parse__();\n                                  if (s12 !== peg$FAILED) {\n                                    s13 = peg$parseRPAREN();\n                                    if (s13 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c483(s5, s9, s11);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c484(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c485();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c486();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c487();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c185;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c185;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c489(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c384;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c385); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c384;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c385); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseDOT();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = void 0;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c490(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c185;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c185;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c186); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c491(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c384;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c385); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c384;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c385); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c492(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c493.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c494); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c495.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c497) {\n      s1 = peg$c497;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c498); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c499();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c500) {\n        s1 = peg$c500;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c501); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c503) {\n          s1 = peg$c503;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c504); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c505();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c506) {\n            s1 = peg$c506;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c507); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c508();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c509) {\n              s1 = peg$c509;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c510); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c511();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c512) {\n                s1 = peg$c512;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c513); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c514();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c515) {\n                  s1 = peg$c515;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c516); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c517();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c518) {\n                    s1 = peg$c518;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c519); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c520();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c521) {\n                      s1 = peg$c521;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c523();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c524) {\n                        s1 = peg$c524;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c525); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c526(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c527;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c528); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c529();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c530) {\n                            s1 = peg$c530;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c531); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c532();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c533) {\n                              s1 = peg$c533;\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c534); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c535();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.substr(peg$currPos, 2) === peg$c536) {\n                                s1 = peg$c536;\n                                peg$currPos += 2;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c537); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c538();\n                              }\n                              s0 = s1;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c539.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c541(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c542(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c543(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c544(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c545(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c362;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c363); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c360;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c361); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c546(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c362;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c363); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c360;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c361); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c547(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c548;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c550(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c552(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c553.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c554); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c555.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c557.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c558); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c559.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c560); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c561(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c562) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c563); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c48); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c564) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c565); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c566) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c567); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c568) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c569); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c570) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c571); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c574) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c575); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c576();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c577) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c578); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c579) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c581) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c107) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c583) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c584); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c585) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c586); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c105) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c106); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c587) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c588); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c589) {\n      s1 = peg$c589;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c590); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURNING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c593) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c594); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c595();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c596) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c598) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c599); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c602) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c607) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c608); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c161) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c613();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLESPACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c614) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c616();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c619();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c620) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c622();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c624) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c626) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c628) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c630) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c632) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c634) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c635); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c636) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c637); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c638) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c639); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c640) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c642) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c643); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c256) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c257); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c644) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c646) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c648) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c652) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c656();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c657) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c658); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c659();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c662();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c663) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c664); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c665();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c666) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c667); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c668();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c669) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c670); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c671();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c198) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c199); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c672();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c673) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c674); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c675();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c676) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c677); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c678();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c679) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c680); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c681();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c139) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c682();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c683) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c684); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c685();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c688();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c689) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c690); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c691();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c692) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c693); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c694();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c695) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c696); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c697();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c698) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c700();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c701) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c702); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c703();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c704) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c705); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c706();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RANK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c707) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c708); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c709();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DENSE_RANK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c710) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c711); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c712();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LISTAGG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c713) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c714); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c715();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROW_NUMBER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c716) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c717); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c718();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_START() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c719) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c720); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c721();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c722) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c723); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c724();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_START() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c727();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c728) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c729); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c730();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_START() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c733();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c734) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c735); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c736();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_ROWTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_ROWTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_ROWTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 15).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 15);\n      peg$currPos += 15;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c745();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_PROCTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 15).toLowerCase() === peg$c746) {\n      s1 = input.substr(peg$currPos, 15);\n      peg$currPos += 15;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c747); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c748();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_PROCTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c751();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_PROCTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c752) {\n      s1 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c753); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c754();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c755) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c756); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c757();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c758) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c759); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c760();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c761) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c762); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c763) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c764); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c765) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c766); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c769) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c770); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c771) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c772); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOLEAN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c782) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c783); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c784();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c787();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c790();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c793();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c796();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c797) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c798); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c799();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c800) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c801); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c802();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c803) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c804); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c805();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c806) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c807); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c808();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c809) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c810); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c811();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSONB() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c812) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c813); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c814();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOMETRY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c815) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c816); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c817();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c818) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c819); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c820();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c821) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c822); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c823();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c824) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c825); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c826();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c827) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c828); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c829();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c830) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c831); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c832();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c833) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c834); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c835();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c836) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c837); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c838();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c839) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c840); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c841();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c842) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c843); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c844();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c437) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c438); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c845();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c846) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c847); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c848();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c849) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c850); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c851();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c852) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c853); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c854();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c855) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c856); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c857();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c858) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c859); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c860();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UUID() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c861) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c862); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c863();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c864) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c865); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c866();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c867) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c868); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c869();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MULTISET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c870) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c871); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c872();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c152) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c153); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c873();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c874) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c875); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c876();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c877) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c878); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c879();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c880) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c881); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c882();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c475) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c883();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c884();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c885();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c886();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c459) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c460); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c887();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c465) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c888();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c889) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c890); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c891();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c892) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c893); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c894();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c895) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c896); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c897();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c898) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c900();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c901) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c902); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c907) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c908); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c909();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c910) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c912();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c913) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c914); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c915();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c916) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c917); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c918();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c919;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c920); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c921) {\n      s0 = peg$c921;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c922); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c372;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c373); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c923) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c924); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c925) {\n      s0 = peg$c925;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c926); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE_COLON() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c927) {\n      s0 = peg$c927;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c928); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c293;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c294); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c929) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c930); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c931) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c932); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c933();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c934) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c935); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c936();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c937) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c938); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c939();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c940();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c941) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c942); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c943();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c944) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c945); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c946();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c31) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c947();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c171) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c952) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c953); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c954();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONCURRENTLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c955) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c956); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c957();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c958) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c959); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c960();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c961) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c962); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c963) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c964); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c965) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c966); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c967) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c968); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c969) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c970); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c971) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c972); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c548;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c973;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c974); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c365;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c221;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c223;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c224); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c975;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c976); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c977;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c978); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLEBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c333;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLEBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c327;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c328); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c979;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c980); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSINGLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c981) {\n      s0 = peg$c981;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c982); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c983) {\n      s0 = peg$c983;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c984); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c985) {\n      s0 = peg$c985;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c986); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_WELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c987) {\n      s0 = peg$c987;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c988); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c989) {\n      s0 = peg$c989;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c990); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c991) {\n      s0 = peg$c991;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c992); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c993) {\n      s1 = peg$c993;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c994); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c995) {\n        s5 = peg$c995;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c996); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c995) {\n          s5 = peg$c995;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c996); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c995) {\n          s3 = peg$c995;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c996); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c997) {\n      s1 = peg$c997;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c998); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c999;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1000); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1001(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1002); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c1003.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1004); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c539.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c540); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c539.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c540); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1002); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c1005();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1006(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1007(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1008(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1009(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1010(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_name();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1011(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1012(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1013(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1014(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1015(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1016(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1017(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c548;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c548;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c549); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1018(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsecharacter_string_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenumeric_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedatetime_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsejson_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsegeometry_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsetext_type();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseuuid_type();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseboolean_type();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsecollection_type();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsekey_value_type();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parserow_type();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseboolean_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BOOL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOLEAN();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1019(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CHAR();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_VARCHAR();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c553.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c554); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c553.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c554); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1020(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CHAR();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1021(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_VARCHAR();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1022(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_STRING();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1023(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1024(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DECIMAL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_INT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_SMALLINT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_TINYINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_BIGINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_FLOAT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_DOUBLE();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c553.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c554); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c553.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c554); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = [];\n                    if (peg$c553.test(input.charAt(peg$currPos))) {\n                      s11 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s11 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c554); }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        if (peg$c553.test(input.charAt(peg$currPos))) {\n                          s11 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c554); }\n                        }\n                      }\n                    } else {\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s8 = [s8, s9, s10];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumeric_type_suffix();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1025(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_NUMERIC();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DECIMAL();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INTEGER();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_SMALLINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_TINYINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_BIGINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_FLOAT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_DOUBLE();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c553.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c554); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c553.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c554); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsenumeric_type_suffix();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1026(s1, s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NUMERIC();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DECIMAL();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_INTEGER();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_SMALLINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_TINYINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_BIGINT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_FLOAT();\n                      if (s1 === peg$FAILED) {\n                        s1 = peg$parseKW_DOUBLE();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumeric_type_suffix();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1027(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c553.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c554); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c553.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c554); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1028(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1022(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_JSON();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_JSONB();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1022(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsegeometry_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GEOMETRY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1029(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TINYTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_MEDIUMTEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_LONGTEXT();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1030(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseuuid_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UUID();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1031(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecollection_type() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLANGLEBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseRANGLEBRAKE();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1032(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekey_value_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_MAP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLANGLEBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCOMMA();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRANGLEBRAKE();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1033(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserow_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROW();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1034(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'INTERVAL': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n\n      'NOT': true,\n      'NULL': true,\n      'NULLS': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'STATUS': true, // reserved (MySQL)\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    function commonStrToLiteral(strOrLiteral) {\n      return typeof strOrLiteral === 'string' ? { type: 'same', value: strOrLiteral } : strOrLiteral\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  let { prefix } = literal\n  const { type, parentheses, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `${prefix || ':'}${value}`\n      prefix = null\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, tablesample, table_hint } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  if (table_hint) result.push(`${toUpper(table_hint.keyword)}`, `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    qualify,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('QUALIFY', exprToSQL, qualify))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr.view)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fulltextSearchToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  fulltext_search : fulltextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type, toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, filter, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  if (args.separator) str = [str, toUpper(args.separator.keyword), literalToSQL(args.separator.value)].filter(hasVal).join(' ')\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  const filterStr = filter ? `FILTER (WHERE ${exprToSQL(filter.where)})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr, filterStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix, order_by,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  result.push(toUpper(order_by))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction generatedExpressionToSQL(generated) {\n  if (!generated) return\n  const result = [toUpper(generated.value), `(${exprToSQL(generated.expr)})`, toUpper(generated.storage_type)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  const generated = generatedExpressionToSQL(columnDefinition.generated)\n  column.push(generated)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fulltextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fulltextSearchToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction deallocateToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  return [toUpper(type), toUpper(keyword), exprToSQL(expr)].filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './analyze'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter      : alterToSQL,\n  analyze    : analyzeToSQL,\n  attach     : attachToSQL,\n  create     : createToSQL,\n  select     : selectToSQL,\n  deallocate : deallocateToSQL,\n  delete     : deleteToSQL,\n  exec       : execToSQL,\n  update     : updateToSQL,\n  insert     : insertToSQL,\n  drop       : commonCmdToSQL,\n  truncate   : commonCmdToSQL,\n  replace    : insertToSQL,\n  declare    : declareToSQL,\n  use        : useToSQL,\n  rename     : renameToSQL,\n  call       : callToSQL,\n  desc       : descToSQL,\n  set        : setVarToSQL,\n  lock       : lockUnlockToSQL,\n  unlock     : lockUnlockToSQL,\n  show       : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\ntypeToSQLFn.bigquery = bigQueryToSQL\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    const astInfo = stmt[i] && stmt[i].ast ? stmt[i].ast : stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'deallocate', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (!global && window) window.global = window\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}