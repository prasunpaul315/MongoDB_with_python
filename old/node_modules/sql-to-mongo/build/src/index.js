#! /usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yargs_1 = __importDefault(require("yargs"));
var helpers_1 = require("yargs/helpers");
var exportDefLoader_1 = require("./exports/exportDefLoader");
var exporter_1 = require("./exports/exporter");
var writerBuilder_1 = require("./writers/writerBuilder");
var optsLoader_1 = require("./opts/optsLoader");
var hooks_1 = require("./hooks");
var readerBuilder_1 = require("./readers/readerBuilder");
var argv = yargs_1.default(helpers_1.hideBin(process.argv))
    .usage('$0 path1 path2 ...')
    .alias('p', 'path')
    .describe('p', 'Dir path to scan for export definitions')
    .alias('c', 'config')
    .describe('c', 'Configuration file path (default is ./s2m.config.js)')
    .alias('d', 'dry-run')
    .describe('d', 'Dont write to Mongo, only output to console')
    .alias('b', 'before-all')
    .describe('b', 'Run beforeAll hook if found in config file')
    .alias('a', 'after-all')
    .describe('a', 'Run afterAll hook if found in config file')
    .boolean(['d', 'b', 'a'])
    .argv;
function main(args) {
    return __awaiter(this, void 0, void 0, function () {
        var opts, exportDefs, writer, reader;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    opts = optsLoader_1.loadOptsFromConfig(args);
                    return [4 /*yield*/, exportDefLoader_1.loadExportDefs(opts.exportDefsFilePaths)];
                case 1:
                    exportDefs = _a.sent();
                    writer = writerBuilder_1.buildWriter(opts);
                    reader = readerBuilder_1.buildReader(opts);
                    return [4 /*yield*/, hooks_1.runBeforeAllHook(opts)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, exporter_1.runExports(exportDefs, writer, reader, opts)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, hooks_1.runAfterAllHook(opts)];
                case 4:
                    _a.sent();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
main(argv).catch(function (err) { return console.error(err.message); });
